package fhir fhir "http://hl7.org/fhir/emf" {
// version 0.3.0.2764, generated Sat, Aug 9, 2014 07:35+1000

  // FHIR Basic Reference Model
  
  abstract class Element { // logical root for all classes 
    attribute EString id (0..1); // xml ID 
    attribute Extension extension {0..-1}; 
  }
  
  abstract class BackboneElement extends Element { // Resources and elements defined in a resource
    attribute Extension modifierExtension (0..-1);
  }
  
  abstract class Type extends Element { // Logical base class for types. 
  }
  
  abstract class Resource extends BackboneElement {
    attribute EString language (0..1);
    attribute Narrative text (0..1);
    attribute Resource contained (0..-1);
  }
  
  // primitive Types
  
  class Boolean extends Type {
    attribute EBoolean value (0..1); // Values can be either true or false (0 and 1 are not valid values)
  }
  
  class Integer extends Type {
    attribute EInt value (0..1); // A signed 32-bit integer (for larger values, use decimal)
  }

  class Decimal extends Type {
    attribute EBigDecimal value (0..1); // A rational number. Note: for implementations, do not use a IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigDecimal). Decimals may not use exponents 
  }

  class Base64Binary extends Type {
    attribute EByteArray value (0..1); // A stream of bytes, base64 encoded (RFC 4648)
  }
	
  class Instant extends Type {
    attribute EDate value (0..1); // An instant in time - known at least to the second and always includes a time zone. Note: This type is for system times, not human times (see date and dateTime below).
  }

  class String extends Type {
    attribute EString value (0..1); // 	A sequence of Unicode characters. Note that strings SHALL NOT exceed 1MB in size
  }

  class Uri extends Type {
    attribute EString value (0..1); // A Uniform Resource Identifier Reference. It can be absolute or relative, and may have an optional fragment identifier (RFC 3986)
  }
	
  class DateTime extends Type {
    attribute EDate value (0..1); // union of xs:date, xs:gYearMonth, xs:gYear	A date, or partial date (e.g. just year or year + month) as used in human communication. There is no time zone. Dates SHALL be valid dates. 
  }

  class DateTime extends Type {
    attribute EBool value (0..1); // union of xs:dateTime, xs:date, xs:gYearMonth, xs:gYear	A date, date-time or partial date (e.g. just year or year + month) as used in human communication. If hours and minutes are specified, a time zone SHALL be populated. Seconds may be provided but may also be ignored. Dates SHALL be valid dates. 
  }
	
  class Code extends String {
    // regex: [^\s]+([\s]+[^\s]+)*
  }

  class Oid extends Uri {
    // An OID represented as a URI (RFC 3001): urn:oid:1.2.3.4.5
  }

  class Uuid extends Uri {
    // A UUID, represented as a URI (RFC 4122): urn:uuid:a5afddf4-e880-459b-876e-e4591b0acc11. Note the RFC comments about case: UUID values SHALL be represented in lower case, but systems SHOULD interpret them case insensitively
  }

  class Id extends String {
    A whole number in the range 0 to 2^64-1 (optionally represented in hex), a uuid, an oid, or any other combination of lowercase letters, numerals, "-" and ".", with a length limit of 36 characters
    regex: [a-z0-9\-\.]{1,36}
  }

  class Extension extends Element {    // Optional Extensions Element - found in all resources.
    attribute Uri url (1..1);    // Source of the definition for the extension code - a logical name or a URL.
    attribute Type value (0..1);    // Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
  }

  class Narrative extends Element {    // A human-readable formatted text, including images.
    enum NarrativeStatus {    // The status of a resource narrative
      0 : Null = "Missing in instance";
      1 : generated = "The contents of the narrative are entirely generated from the structured data in the resource.";
      2 : extensions = "The contents of the narrative are entirely generated from the structured data in the resource and some of the content is generated from extensions.";
      3 : additional = "The contents of the narrative contain additional information not found in the structured data.";
      4 : empty = "the contents of the narrative are some equivalent of "No human-readable text provided for this resource".";
    }

    attribute NarrativeStatus status (1..1);    // The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
    attribute xhtml? div (1..1);    // The actual narrative content, a stripped down version of XHTML.
  }

  class Period extends Type {    // A time period defined by a start and end date and optionally time.
    attribute DateTime start (0..1);    // The start of the period. The boundary is inclusive.
    attribute DateTime end (0..1);    // The end of the period. If the end of the period is missing, it means that the period is ongoing.
  }

  class Coding extends Type {    // A reference to a code defined by a terminology system.
    attribute Uri system (0..1);    // The identification of the code system that defines the meaning of the symbol in the code.
    attribute String version (0..1);    // The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and When the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
    attribute Code code (0..1);    // A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
    attribute String display (0..1);    // A representation of the meaning of the code in the system, following the rules of the system.
    attribute Boolean primary (0..1);    // Indicates that this code was chosen by a user directly - i.e. off a pick list of available items (codes or displays).
    attribute ResourceReference valueSet (0..1);    // The set of possible coded values this coding was chosen from or constrained by.
  }

  class Range extends Type {    // A set of ordered Quantities defined by a low and high limit.
    attribute Quantity low (0..1);    // The low limit. The boundary is inclusive.
    attribute Quantity high (0..1);    // The high limit. The boundary is inclusive.
  }

  class Quantity extends Type {    // A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
    enum QuantityComparator {    // How the Quantity should be understood and represented
      0 : Null = "Missing in instance";
      1 : lessThan = "The actual value is less than the given value.";
      2 : lessOrEqual = "The actual value is less than or equal to the given value.";
      3 : greaterOrEqual = "The actual value is greater than or equal to the given value.";
      4 : greaterThan = "The actual value is greater than the given value.";
    }

    attribute Decimal value (0..1);    // The value of the measured amount. The value includes an implicit precision in the presentation of the value.
    attribute QuantityComparator comparator (0..1);    // How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues. E.g. if the comparator is "<" , then the real value is < stated value.
    attribute String units (0..1);    // A human-readable form of the units.
    attribute Uri system (0..1);    // The identification of the system that provides the coded form of the unit.
    attribute Code code (0..1);    // A computer processable form of the units in some unit representation system.
  }

  class Attachment extends Type {    // For referring to data content defined in other formats.
    attribute Code contentType (1..1);    // Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
    attribute Code language (0..1);    // The human language of the content. The value can be any valid value according to BCP 47.
    attribute Base64Binary data (0..1);    // The actual data of the attachment - a sequence of bytes. In XML, represented using base64.
    attribute Uri url (0..1);    // An alternative location where the data can be accessed.
    attribute Integer size (0..1);    // The number of bytes of data that make up this attachment.
    attribute Base64Binary hash (0..1);    // The calculated hash of the data using SHA-1. Represented using base64.
    attribute String title (0..1);    // A label or set of text to display in place of the data.
  }

  class Ratio extends Type {    // A relationship of two Quantity values - expressed as a numerator and a denominator.
    attribute Quantity numerator (0..1);    // The value of the numerator.
    attribute Quantity denominator (0..1);    // The value of the denominator.
  }

  class SampledData extends Type {    // A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
    attribute Quantity origin (1..1);    // The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
    attribute Decimal period (1..1);    // The length of time between sampling times, measured in milliseconds.
    attribute Decimal factor (0..1);    // A correction factor that is applied to the sampled data points before they are added to the origin.
    attribute Decimal lowerLimit (0..1);    // The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
    attribute Decimal upperLimit (0..1);    // The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
    attribute Integer dimensions (1..1);    // The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
    attribute String data (1..1);    // A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
  }

  class ResourceReference extends Type {    // A reference from one resource to another.
    attribute String reference (0..1);    // A reference to a location at which the other resource is found. The reference may a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
    attribute String display (0..1);    // Plain text narrative that identifies the resource in addition to the resource reference.
  }

  class CodeableConcept extends Type {    // A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
    attribute Coding coding (0..-1);    // A reference to a code defined by a terminology system.
    attribute String text (0..1);    // A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
  }

  class Identifier extends Type {    // A technical identifier - identifies some entity uniquely and unambiguously.
    enum IdentifierUse {    // Identifies the purpose for this identifier, if known
      0 : Null = "Missing in instance";
      1 : usual = "the identifier recommended for display and use in real-world interactions.";
      2 : official = "the identifier considered to be most trusted for the identification of this item.";
      3 : temp = "A temporary identifier.";
      4 : secondary = "An identifier that was assigned in secondary use - it serves to identify the object in a relative context, but cannot be consistently assigned to the same object again in a different context.";
    }

    attribute IdentifierUse use (0..1);    // The purpose of this identifier.
    attribute String label (0..1);    // A text string for the identifier that can be displayed to a human so they can recognize the identifier.
    attribute Uri system (0..1);    // Establishes the namespace in which set of possible id values is unique.
    attribute String value (0..1);    // The portion of the identifier typically displayed to the user and which is unique within the context of the system.
    attribute Period period (0..1);    // Time period during which identifier is/was valid for use.
    attribute ResourceReference assigner (0..1);    // Organization that issued/manages the identifier.
  }

  class Age extends Quantity {    // A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
  }

  class Count extends Quantity {    // A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
  }

  class Money extends Quantity {    // A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
  }

  class Distance extends Quantity {    // A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
  }

  class Duration extends Quantity {    // A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
  }

  class Schedule extends Type {    // Specifies an event that may occur multiple times. Schedules are used for to reord when things are expected or requested to occur.
    enum EventTiming {    // Real world event that the schedule relates to
      0 : Null = "Missing in instance";
      1 : hS = "event occurs [duration] before the hour of sleep (or trying to).";
      2 : wAKE = "event occurs [duration] after waking.";
      3 : aC = "event occurs [duration] before a meal (from the Latin ante cibus).";
      4 : aCM = "event occurs [duration] before breakfast (from the Latin ante cibus matutinus).";
      5 : aCD = "event occurs [duration] before lunch (from the Latin ante cibus diurnus).";
      6 : aCV = "event occurs [duration] before dinner (from the Latin ante cibus vespertinus).";
      7 : pC = "event occurs [duration] after a meal (from the Latin post cibus).";
      8 : pCM = "event occurs [duration] after breakfast (from the Latin post cibus matutinus).";
      9 : pCD = "event occurs [duration] after lunch (from the Latin post cibus diurnus).";
      10 : pCV = "event occurs [duration] after dinner (from the Latin post cibus vespertinus).";
    }

    enum UnitsOfTime {    // A unit of time (units from UCUM)
      0 : Null = "Missing in instance";
      1 : s = "second.";
      2 : min = "minute.";
      3 : h = "hour.";
      4 : d = "day.";
      5 : wk = "week.";
      6 : mo = "month.";
      7 : a = "year.";
    }

    class ScheduleRepeatComponent extends Element {
      attribute Integer frequency (0..1);    // Indicates how often the event should occur.
      attribute EventTiming when (0..1);    // Identifies the occurrence of daily life that determines timing.
      attribute Decimal duration (1..1);    // How long each repetition should last.
      attribute UnitsOfTime units (1..1);    // The units of time for the duration.
      attribute Integer count (0..1);    // A total count of the desired number of repetitions.
      attribute DateTime end (0..1);    // When to stop repeating the schedule.
    }

    attribute Period event (0..-1);    // Identifies specific time periods when the event should occur.
    attribute ScheduleRepeatComponent repeat (0..1);    // Identifies a repeating pattern to the intended time periods.
  }

  class Contact extends Type {    // All kinds of technology mediated contact details for a person or organization, including telephone, email, etc.
    enum ContactSystem {    // Telecommunications form for contact
      0 : Null = "Missing in instance";
      1 : phone = "The value is a telephone number used for voice calls. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.";
      2 : fax = "The value is a fax machine. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.";
      3 : email = "The value is an email address.";
      4 : url = "The value is a url. This is intended for various personal contacts including blogs, Twitter, Facebook, etc. Do not use for email addresses.";
    }

    enum ContactUse {    // Location, type or status of telecommunications address indicating use
      0 : Null = "Missing in instance";
      1 : home = "A communication contact at a home; attempted contacts for business purposes might intrude privacy and chances are one will contact family or other household members instead of the person one wishes to call. Typically used with urgent cases, or if no other contacts are available.";
      2 : work = "An office contact. First choice for business related contacts during business hours.";
      3 : temp = "A temporary contact. The period can provide more detailed information.";
      4 : old = "This contact is no longer in use (or was never correct, but retained for records).";
      5 : mobile = "A telecommunication device that moves and stays with its owner. May have characteristics of all other use codes, suitable for urgent matters, not the first choice for routine business.";
    }

    attribute ContactSystem system (0..1);    // Telecommunications form for contact - what communications system is required to make use of the contact.
    attribute String value (0..1);    // The actual contact details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
    attribute ContactUse use (0..1);    // Identifies the purpose for the address.
    attribute Period period (0..1);    // Time period when the contact was/is in use.
  }

  class Address extends Type {    // There is a variety of postal address formats defined around the world. This format defines a superset that is the basis for all addresses around the world.
    enum AddressUse {    // The use of an address
      0 : Null = "Missing in instance";
      1 : home = "A communication address at a home.";
      2 : work = "An office address. First choice for business related contacts during business hours.";
      3 : temp = "A temporary address. The period can provide more detailed information.";
      4 : old = "This address is no longer in use (or was never correct, but retained for records).";
    }

    attribute AddressUse use (0..1);    // The purpose of this address.
    attribute String text (0..1);    // A full text representation of the address.
    attribute String line (0..-1);    // This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
    attribute String city (0..1);    // The name of the city, town, village or other community or delivery center.
    attribute String state (0..1);    // Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
    attribute String zip (0..1);    // A postal code designating a region defined by the postal service.
    attribute String country (0..1);    // Country - a nation as commonly understood or generally accepted.
    attribute Period period (0..1);    // Time period when address was/is in use.
  }

  class HumanName extends Type {    // A human's name with the ability to identify parts and usage.
    enum NameUse {    // The use of a human name
      0 : Null = "Missing in instance";
      1 : usual = "Known as/conventional/the one you normally use.";
      2 : official = "The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called "legal name".";
      3 : temp = "A temporary name. Name.period can provide more detailed information. This may also be used for temporary names assigned at birth or in emergency situations.";
      4 : nickname = "A name that is used to address the person in an informal manner, but is not part of their formal or usual name.";
      5 : anonymous = "Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons).";
      6 : old = "This name is no longer in use (or was never correct, but retained for records).";
      7 : maiden = "A name used prior to marriage. Marriage naming customs vary greatly around the world. This name use is for use by applications that collect and store "maiden" names. Though the concept of maiden name is often gender specific, the use of this term is not gender specific. The use of this term does not imply any particular history for a person's name, nor should the maiden name be determined algorithmically.";
    }

    attribute NameUse use (0..1);    // Identifies the purpose for this name.
    attribute String text (0..1);    // A full text representation of the name.
    attribute String family (0..-1);    // The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
    attribute String given (0..-1);    // Given name.
    attribute String prefix (0..-1);    // Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
    attribute String suffix (0..-1);    // Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
    attribute Period period (0..1);    // Indicates the period of time when this name was valid for the named person.
  }

  class AdverseReaction extends Resource {    // Records an unexpected reaction suspected to be related to the exposure of the reaction subject to a substance.
    enum ReactionSeverity {    // The severity of an adverse reaction.
      0 : Null = "Missing in instance";
      1 : severe = "Severe complications arose due to the reaction.";
      2 : serious = "Serious inconvenience to the subject.";
      3 : moderate = "Moderate inconvenience to the subject.";
      4 : minor = "Minor inconvenience to the subject.";
    }

    enum ExposureType {    // The type of exposure that resulted in an adverse reaction
      0 : Null = "Missing in instance";
      1 : drugadmin = "Drug Administration.";
      2 : immuniz = "Immunization.";
      3 : coincidental = "In the same area as the substance.";
    }

    enum CausalityExpectation {    // How likely is it that the given exposure caused a reaction
      0 : Null = "Missing in instance";
      1 : likely = "Likely that this specific exposure caused the reaction.";
      2 : unlikely = "Unlikely that this specific exposure caused the reaction - the exposure is being linked to for information purposes.";
      3 : confirmed = "It has been confirmed that this exposure was one of the causes of the reaction.";
      4 : unknown = "It is unknown whether this exposure had anything to do with the reaction.";
    }

    class AdverseReactionSymptomComponent extends BackboneElement {
      attribute CodeableConcept code (1..1);    // Indicates the specific sign or symptom that was observed.
      attribute ReactionSeverity severity (0..1);    // The severity of the sign or symptom.
    }

    class AdverseReactionExposureComponent extends BackboneElement {
      attribute DateTime date (0..1);    // Identifies the initial date of the exposure that is suspected to be related to the reaction.
      attribute ExposureType type (0..1);    // The type of exposure: Drug Administration, Immunization, Coincidental.
      attribute CausalityExpectation causalityExpectation (0..1);    // A statement of how confident that the recorder was that this exposure caused the reaction.
      attribute ResourceReference substance (0..1);    // Substance that is presumed to have caused the adverse reaction.
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this reaction that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute DateTime date (0..1);    // The date (and possibly time) when the reaction began.
    attribute ResourceReference subject (1..1);    // The subject of the adverse reaction.
    attribute Boolean didNotOccurFlag (1..1);    // If true, indicates that no reaction occurred.
    attribute ResourceReference recorder (0..1);    // Identifies the individual responsible for the information in the reaction record.
    attribute AdverseReactionSymptomComponent symptom (0..-1);    // The signs and symptoms that were observed as part of the reaction.
    attribute AdverseReactionExposureComponent exposure (0..-1);    // An exposure to a substance that preceded a reaction occurrence.
  }

  class Alert extends Resource {    // Prospective warnings of potential issues when providing care to the patient.
    enum AlertStatus {    // Indicates whether this alert is active and needs to be displayed to a user, or whether it is no longer needed or entered in error
      0 : Null = "Missing in instance";
      1 : active = "A current alert that should be displayed to a user. A system may use the category to determine which roles should view the alert.";
      2 : inactive = "The alert does not need to be displayed any more.";
      3 : enteredInError = "The alert was added in error, and should no longer be displayed.";
    }

    attribute Identifier identifier (0..-1);    // Identifier assigned to the alert for external use (outside the FHIR environment).
    attribute CodeableConcept category (0..1);    // Allows an alert to be divided into different categories like clinical, administrative etc.
    attribute AlertStatus status (1..1);    // Supports basic workflow.
    attribute ResourceReference subject (1..1);    // The person who this alert concerns.
    attribute ResourceReference author (0..1);    // The person or device that created the alert.
    attribute String note (1..1);    // The textual component of the alert to display to the user.
  }

  class AllergyIntolerance extends Resource {    // Indicates the patient has a susceptibility to an adverse reaction upon exposure to a specified substance.
    enum Criticality {    // The criticality of an adverse sensitivity
      0 : Null = "Missing in instance";
      1 : fatal = "Likely to result in death if re-exposed.";
      2 : high = "Likely to result in reactions that will need to be treated if re-exposed.";
      3 : medium = "Likely to result in reactions that will inconvenience the subject.";
      4 : low = "Not likely to result in any inconveniences for the subject.";
    }

    enum Sensitivitytype {    // The type of an adverse sensitivity
      0 : Null = "Missing in instance";
      1 : allergy = "Allergic Reaction.";
      2 : intolerance = "Non-Allergic Reaction.";
      3 : unknown = "Unknown type.";
    }

    enum Sensitivitystatus {    // The status of the adverse sensitivity
      0 : Null = "Missing in instance";
      1 : suspected = "A suspected sensitivity to a substance.";
      2 : confirmed = "The sensitivity has been confirmed and is active.";
      3 : refuted = "The sensitivity has been shown to never have existed.";
      4 : resolved = "The sensitivity used to exist but no longer does.";
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this allergy/intolerance concern that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute Criticality criticality (0..1);    // Criticality of the sensitivity.
    attribute Sensitivitytype sensitivityType (1..1);    // Type of the sensitivity.
    attribute DateTime recordedDate (0..1);    // Date when the sensitivity was recorded.
    attribute Sensitivitystatus status (1..1);    // Status of the sensitivity.
    attribute ResourceReference subject (1..1);    // The patient who has the allergy or intolerance.
    attribute ResourceReference recorder (0..1);    // Indicates who has responsibility for the record.
    attribute ResourceReference substance (1..1);    // The substance that causes the sensitivity.
    attribute ResourceReference reaction (0..-1);    // Reactions associated with the sensitivity.
    attribute ResourceReference sensitivityTest (0..-1);    // Observations that confirm or refute the sensitivity.
  }

  class Appointment extends Resource {    // (informative) A scheduled appointment for a patient and/or practitioner(s) where a service may take place.
    enum Participantrequired {    // Is the Participant required to attend the appointment
      0 : Null = "Missing in instance";
      1 : required = "The participant is required to attend the appointment.";
      2 : optional = "The participant may optionally attend the appointment.";
      3 : informationonly = "The participant is not required to attend the appointment (appointment is about them, not for them).";
    }

    enum Participationstatus {    // The Participation status of an appointment
      0 : Null = "Missing in instance";
      1 : accepted = "The participant has accepted the appointment.";
      2 : declined = "The participant has declined the appointment and will not participate in the appointment.";
      3 : tentative = "The participant has  tentatively accepted the appointment. This could be automatically created by a system and requires further processing before it can be accepted. There is no commitment that attendance will occur.";
      4 : inprocess = "The participant has started the appointment.";
      5 : completed = "The participant's involvement in the appointment has been completed.";
      6 : needsaction = "The participant needs to indicate if they accept the appointment by changing this status to one of the other statuses.";
    }

    class AppointmentParticipantComponent extends BackboneElement {
      attribute CodeableConcept type (0..-1);    // Role of participant in the appointment.
      attribute ResourceReference individual (0..1);    // A Person of device that is participating in the appointment, usually Practitioner, Patient, RelatedPerson or Device.
      attribute Participantrequired required (0..1);    // Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
      attribute Participationstatus status (1..1);    // Participation status of the Patient.
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this appointment concern that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute Integer priority (0..1);    // The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority) (Need to change back to CodeableConcept).
    attribute Code status (0..1);    // Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
    attribute CodeableConcept type (0..1);    // The type of appointments that is being booked (ideally this would be an identifiable service - which is at a location, rather than the location itself).
    attribute CodeableConcept reason (0..1);    // The reason that this appointment is being scheduled, this is more clinical than administrative.
    attribute String description (0..1);    // The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
    attribute Instant start (1..1);    // Date/Time that the appointment is to take place.
    attribute Instant end (1..1);    // Date/Time that the appointment is to conclude.
    attribute ResourceReference slot (0..-1);    // The slot that this appointment is filling. If provided then the schedule will not be provided as slots are not recursive, and the start/end values MUST be the same as from the slot.
    attribute ResourceReference location (0..1);    // The primary location that this appointment is to take place.
    attribute String comment (0..1);    // Additional comments about the appointment.
    attribute ResourceReference order (0..1);    // An Order that lead to the creation of this appointment.
    attribute AppointmentParticipantComponent participant (1..-1);    // List of participants involved in the appointment.
    attribute ResourceReference lastModifiedBy (0..1);    // Who recorded the appointment.
    attribute DateTime lastModified (0..1);    // Date when the appointment was recorded.
  }

  class AppointmentResponse extends Resource {    // (informative) A response to a scheduled appointment for a patient and/or practitioner(s).
    enum Participantstatus {    // The Participation status of an appointment
      0 : Null = "Missing in instance";
      1 : accepted = "The appointment participant has accepted that they can attend the appointment at the time specified in the AppointmentResponse.";
      2 : declined = "The appointment participant has declined the appointment.";
      3 : tentative = "The appointment participant has tentatively accepted the appointment.";
      4 : inprocess = "The participant has in-process the appointment.";
      5 : completed = "The participant has completed the appointment.";
      6 : needsaction = "This is the intitial status of an appointment participant until a participant has replied. It implies that there is no commitment for the appointment.";
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this appointment concern that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute ResourceReference appointment (1..1);    // Parent appointment that this response is replying to.
    attribute CodeableConcept participantType (0..-1);    // Role of participant in the appointment.
    attribute ResourceReference individual (0..-1);    // A Person of device that is participating in the appointment, usually Practitioner, Patient, RelatedPerson or Device.
    attribute Participantstatus participantStatus (1..1);    // Participation status of the Patient.
    attribute String comment (0..1);    // Additional comments about the appointment.
    attribute Instant start (0..1);    // Date/Time that the appointment is to take place.
    attribute Instant end (0..1);    // Date/Time that the appointment is to conclude.
    attribute ResourceReference lastModifiedBy (0..1);    // Who recorded the appointment response.
    attribute DateTime lastModified (0..1);    // Date when the response was recorded or last updated.
  }

  class Availability extends Resource {    // (informative) A container for slot(s) of time that may be available for booking appointments.
    attribute Identifier identifier (0..-1);    // External Ids for this item.
    attribute CodeableConcept type (0..-1);    // The type(s) of appointments that can be booked into slots attached to this availability resource (ideally this would be an identifiable service - which is at a location, rather than the location itself). (This may be over-ridden by a slot itself).
    attribute ResourceReference individual (1..1);    // The resource this availability resource is providing availability information for. These are expected to usually be one of Location, Practitioner, Device, Patient or RelatedPerson.
    attribute Period planningHorizon (0..1);    // The period of time that the slots that are attached to this availability resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
    attribute String comment (0..1);    // Comments on the availability to describe any extended information. Such as custom constraints on the slot(s) that may be associated.
    attribute DateTime lastModified (0..1);    // When this availability was created, or last revised.
  }

  class CarePlan extends Resource {    // Describes the intention of how one or more practitioners intend to deliver care for a particular patient for a period of time, possibly limited to care for a specific condition or set of conditions.
    enum CarePlanStatus {    // Indicates whether the plan is currently being acted upon, represents future intentions or is now just historical record.
      0 : Null = "Missing in instance";
      1 : planned = "The plan is in development or awaiting use but is not yet intended to be acted upon.";
      2 : active = "The plan is intended to be followed and used as part of patient care.";
      3 : completed = "The plan is no longer in use and is not expected to be followed or used in patient care.";
    }

    enum CarePlanGoalStatus {    // Indicates whether the goal has been met and is still being targeted
      0 : Null = "Missing in instance";
      1 : inProgress = "The goal is being sought but has not yet been reached.  (Also applies if goal was reached in the past but there has been regression and goal is being sought again).";
      2 : achieved = "The goal has been met and no further action is needed.";
      3 : sustaining = "The goal has been met, but ongoing activity is needed to sustain the goal objective.";
      4 : cancelled = "The goal is no longer being sought.";
    }

    enum CarePlanActivityStatus {    // Indicates where the activity is at in its overall life cycle
      0 : Null = "Missing in instance";
      1 : notStarted = "Activity is planned but no action has yet been taken.";
      2 : scheduled = "Appointment or other booking has occurred but activity has not yet begun.";
      3 : inProgress = "Activity has been started but is not yet complete.";
      4 : onHold = "Activity was started but has temporarily ceased with an expectation of resumption at a future time.";
      5 : completed = "The activities have been completed (more or less) as planned.";
      6 : cancelled = "The activities have been ended prior to completion (perhaps even before they were started).";
    }

    enum CarePlanActivityCategory {    // High-level categorization of the type of activity in a care plan.
      0 : Null = "Missing in instance";
      1 : diet = "Plan for the patient to consume food of a specified nature.";
      2 : drug = "Plan for the patient to consume/receive a drug, vaccine or other product.";
      3 : encounter = "Plan to meet or communicate with the patient (in-patient, out-patient, phone call, etc.).";
      4 : observation = "Plan to capture information about a patient (vitals, labs, diagnostic images, etc.).";
      5 : procedure = "Plan to modify the patient in some way (surgery, physiotherapy, education, counseling, etc.).";
      6 : supply = "Plan to provide something to the patient (medication, medical supply, etc.).";
      7 : other = "Some other form of action.";
    }

    class CarePlanParticipantComponent extends BackboneElement {
      attribute CodeableConcept role (0..1);    // Indicates specific responsibility of an individual within the care plan.  E.g. "Primary physician", "Team coordinator", "Caregiver", etc.
      attribute ResourceReference member (1..1);    // The specific person or organization who is participating/expected to participate in the care plan.
    }

    class CarePlanGoalComponent extends BackboneElement {
      attribute String description (1..1);    // Human-readable description of a specific desired objective of the care plan.
      attribute CarePlanGoalStatus status (0..1);    // Indicates whether the goal has been reached and is still considered relevant.
      attribute String notes (0..1);    // Any comments related to the goal.
      attribute ResourceReference concern (0..-1);    // The identified conditions that this goal relates to - the condition that caused it to be created, or that it is intended to address.
    }

    class CarePlanActivityComponent extends BackboneElement {
      attribute string goal (0..-1);    // Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
      attribute CarePlanActivityStatus status (0..1);    // Identifies what progress is being made for the specific activity.
      attribute Boolean prohibited (1..1);    // If true, indicates that the described activity is one that must NOT be engaged in when following the plan.
      attribute ResourceReference actionResulting (0..-1);    // Resources that describe follow-on actions resulting from the plan, such as drug prescriptions, encounter records, appointments, etc.
      attribute String notes (0..1);    // Notes about the execution of the activity.
      attribute ResourceReference detail (0..1);    // The details of the proposed activity represented in a specific resource.
      attribute CarePlanActivitySimpleComponent simple (0..1);    // A simple summary of details suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
    }

    class CarePlanActivitySimpleComponent extends BackboneElement {
      attribute CarePlanActivityCategory category (1..1);    // High-level categorization of the type of activity in a care plan.
      attribute CodeableConcept code (0..1);    // Detailed description of the type of activity.  E.g. What lab test, what procedure, what kind of encounter.
      attribute Type timing (0..1);    // The period, timing or frequency upon which the described activity is to occur.
      attribute ResourceReference location (0..1);    // Identifies the facility where the activity will occur.  E.g. home, hospital, specific clinic, etc.
      attribute ResourceReference performer (0..-1);    // Identifies who's expected to be involved in the activity.
      attribute ResourceReference product (0..1);    // Identifies the food, drug or other product being consumed or supplied in the activity.
      attribute Quantity dailyAmount (0..1);    // Identifies the quantity expected to be consumed in a given day.
      attribute Quantity quantity (0..1);    // Identifies the quantity expected to be supplied.
      attribute String details (0..1);    // This provides a textual description of constraints on the activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this care plan that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute ResourceReference patient (0..1);    // Identifies the patient/subject whose intended care is described by the plan.
    attribute CarePlanStatus status (1..1);    // Indicates whether the plan is currently being acted upon, represents future intentions or is now just historical record.
    attribute Period period (0..1);    // Indicates when the plan did (or is intended to) come into effect and end.
    attribute DateTime modified (0..1);    // Identifies the most recent date on which the plan has been revised.
    attribute ResourceReference concern (0..-1);    // Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
    attribute CarePlanParticipantComponent participant (0..-1);    // Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
    attribute CarePlanGoalComponent goal (0..-1);    // Describes the intended objective(s) of carrying out the Care Plan.
    attribute CarePlanActivityComponent activity (0..-1);    // Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
    attribute String notes (0..1);    // General notes about the care plan not covered elsewhere.
  }

  class Composition extends Resource {    // A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement.
    enum CompositionStatus {    // The workflow/clinical status of the composition
      0 : Null = "Missing in instance";
      1 : preliminary = "This is a preliminary composition or document (also known as initial or interim). The content may be incomplete or unverified.";
      2 : final_ = "The composition or document is complete and verified by an appropriate person, and no further work is planned.";
      3 : appended = "The composition or document has been modified subsequent to being released as "final", and is complete and verified by an authorized person. The modifications added new information to the composition or document, but did not revise existing content.";
      4 : amended = "The composition or document has been modified subsequent to being released as "final", and is complete and verified by an authorized person.";
      5 : enteredInError = "The composition or document was originally created/issued in error, and this is an amendment that marks that the entire series should not be considered as valid.";
    }

    enum CompositionAttestationMode {    // The way in which a person authenticated a composition
      0 : Null = "Missing in instance";
      1 : personal = "The person authenticated the content in their personal capacity.";
      2 : professional = "The person authenticated the content in their professional capacity.";
      3 : legal = "The person authenticated the content and accepted legal responsibility for its content.";
      4 : official = "The organization authenticated the content as consistent with their policies and procedures.";
    }

    class CompositionAttesterComponent extends BackboneElement {
      attribute CompositionAttestationMode mode (1..-1);    // The type of attestation the authenticator offers.
      attribute DateTime time (0..1);    // When composition was attested by the party.
      attribute ResourceReference party (0..1);    // Who attested the composition in the specified way.
    }

    class CompositionEventComponent extends BackboneElement {
      attribute CodeableConcept code (0..-1);    // This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
      attribute Period period (0..1);    // The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
      attribute ResourceReference detail (0..-1);    // Full details for the event(s) the composition/documentation consents.
    }

    class SectionComponent extends BackboneElement {
      attribute String title (0..1);    // The heading for this particular section.  This will be part of the rendered content for the document.
      attribute CodeableConcept code (0..1);    // A code identifying the kind of content contained within the section.
      attribute ResourceReference subject (0..1);    // Identifies the primary subject of the section.
      attribute ResourceReference content (0..1);    // Identifies the discrete data that provides the content for the section.
      attribute SectionComponent section (0..-1);    // A nested sub-section within this section.
    }

    attribute Identifier identifier (0..1);    // Logical Identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.
    attribute DateTime date (1..1);    // The composition editing time, when the composition was last logically changed by the author.
    attribute CodeableConcept type (1..1);    // Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
    attribute CodeableConcept class_ (0..1);    // A categorization for the type of the composition. This may be implied by or derived from the code specified in the Composition Type.
    attribute String title (0..1);    // Official human-readable label for the composition.
    attribute CompositionStatus status (1..1);    // The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
    attribute Coding confidentiality (1..1);    // The code specifying the level of confidentiality of the Composition.
    attribute ResourceReference subject (1..1);    // Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (I.e. machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
    attribute ResourceReference author (1..-1);    // Identifies who is responsible for the information in the composition.  (Not necessarily who typed it in.).
    attribute CompositionAttesterComponent attester (0..-1);    // A participant who has attested to the accuracy of the composition/document.
    attribute ResourceReference custodian (0..1);    // Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
    attribute CompositionEventComponent event (0..1);    // The main event/act/item, such as a colonoscopy or an appendectomy, being documented.
    attribute ResourceReference encounter (0..1);    // Describes the clinical encounter or type of care this documentation is associated with.
    attribute SectionComponent section (0..-1);    // The root of the sections that make up the composition.
  }

  class ConceptMap extends Resource {    // A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
    enum ValuesetStatus {    // The lifecycle status of a Value Set or Concept Map
      0 : Null = "Missing in instance";
      1 : draft = "This valueset is still under development.";
      2 : active = "This valueset is ready for normal use.";
      3 : retired = "This valueset has been withdrawn or superceded and should no longer be used.";
    }

    enum ConceptEquivalence {    // The degree of equivalence between concepts
      0 : Null = "Missing in instance";
      1 : equal = "The definitions of the concepts are exactly the same (i.e. only grammatical differences) and structural implications of meaning are identifical or irrelevant (i.e. intensionally identical).";
      2 : equivalent = "The definitions of the concepts mean the same thing (including when structural implications of meaning are considered) (i.e. extensionally identical).";
      3 : wider = "The target mapping is wider in meaning than the source concept.";
      4 : subsumes = "The target mapping subsumes the meaning of the source concept (e.g. the source is-a target).";
      5 : narrower = "The target mapping is narrower in meaning that the source concept. The sense in which the mapping is narrower SHALL be described in the comments in this case, and applications should be careful when atempting to use these mappings operationally.";
      6 : specialises = "The target mapping specialises the meaning of the source concept (e.g. the target is-a source).";
      7 : inexact = "The target mapping overlaps with the source concept, but both source and target cover additional meaning. The sense in which the mapping is narrower SHALL be described in the comments in this case, and applications should be careful when atempting to use these mappings operationally.";
      8 : unmatched = "There is no match for this concept in the destination concept system.";
      9 : disjoint = "This is an explicit assertion that there is no mapping between the source and target concept.";
    }

    class ConceptMapElementComponent extends BackboneElement {
      attribute Uri codeSystem (1..1);    // Code System (if value set crosses code systems).
      attribute Code code (0..1);    // Identifies element being mapped.
      attribute OtherElementComponent dependsOn (0..-1);    // A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
      attribute ConceptMapElementMapComponent map (0..-1);    // A concept from the target value set that this concept maps to.
    }

    class OtherElementComponent extends BackboneElement {
      attribute Uri element (1..1);    // A reference to a specific concept that holds a coded value. This can be an element in a FHIR resource, or a specific reference to a data element in a different specification (e.g. v2) or a general reference to a kind of data field, or a reference to a value set with an appropriately narrow definition.
      attribute Uri codeSystem (1..1);    // Code System (if necessary).
      attribute String code (1..1);    // Value of the referenced element.
    }

    class ConceptMapElementMapComponent extends BackboneElement {
      attribute Uri codeSystem (0..1);    // System of the target (if necessary).
      attribute Code code (0..1);    // Code that identifies the target element.
      attribute ConceptEquivalence equivalence (1..1);    // equal | equivalent | wider | subsumes | narrower | specialises | inexact | unmatched | disjoint.
      attribute String comments (0..1);    // Description of status/issues in mapping.
      attribute OtherElementComponent product (0..-1);    // A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
    }

    attribute String identifier (0..1);    // The identifier that is used to identify this concept map when it is referenced in a specification, model, design or an instance (should be globally unique OID, UUID, or URI).
    attribute String version (0..1);    // The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    attribute String name (1..1);    // A free text natural language name describing the concept map.
    attribute String publisher (0..1);    // The name of the individual or organization that published the concept map.
    attribute Contact telecom (0..-1);    // Contacts of the publisher to assist a user in finding and communicating with the publisher.
    attribute String description (0..1);    // A free text natural language description of the use of the concept map - reason for definition, conditions of use, etc.
    attribute String copyright (0..1);    // A copyright statement relating to the concept map and/or its contents.
    attribute ValuesetStatus status (1..1);    // The status of the concept map.
    attribute Boolean experimental (0..1);    // This ConceptMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    attribute DateTime date (0..1);    // The date that the concept map status was last changed.
    attribute Type source (1..1);    // The source value set that specifies the concepts that are being mapped.
    attribute Type target (1..1);    // The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
    attribute ConceptMapElementComponent element (0..-1);    // Mappings for a concept from the source set.
  }

  class Condition extends Resource {    // Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a Diagnosis during an Encounter; populating a problem List or a Summary Statement, such as a Discharge Summary.
    enum ConditionStatus {    // The clinical status of the Condition or diagnosis
      0 : Null = "Missing in instance";
      1 : provisional = "This is a tentative diagnosis - still a candidate that is under consideration.";
      2 : working = "The patient is being treated on the basis that this is the condition, but it is still not confirmed.";
      3 : confirmed = "There is sufficient diagnostic and/or clinical evidence to treat this as a confirmed condition.";
      4 : refuted = "This condition has been ruled out by diagnostic and clinical evidence.";
    }

    enum ConditionRelationshipType {    // The type of relationship between a condition and its related item
      0 : Null = "Missing in instance";
      1 : dueto = "this condition follows the identified condition/procedure/substance and is a consequence of it.";
      2 : following = "this condition follows the identified condition/procedure/substance, but it is not known whether they are causually linked.";
    }

    class ConditionStageComponent extends BackboneElement {
      attribute CodeableConcept summary (0..1);    // A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
      attribute ResourceReference assessment (0..-1);    // Reference to a formal record of the evidence on which the staging assessment is based.
    }

    class ConditionEvidenceComponent extends BackboneElement {
      attribute CodeableConcept code (0..1);    // A manifestation or symptom that led to the recording of this condition.
      attribute ResourceReference detail (0..-1);    // Links to other relevant information, including pathology reports.
    }

    class ConditionLocationComponent extends BackboneElement {
      attribute CodeableConcept code (0..1);    // Code that identifies the structural location.
      attribute String detail (0..1);    // Detailed anatomical location information.
    }

    class ConditionRelatedItemComponent extends BackboneElement {
      attribute ConditionRelationshipType type (1..1);    // The type of relationship that this condition has to the related item.
      attribute CodeableConcept code (0..1);    // Code that identifies the target of this relationship. The code takes the place of a detailed instance target.
      attribute ResourceReference target (0..1);    // Target of the relationship.
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this condition that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute ResourceReference subject (1..1);    // Indicates the patient who the condition record is associated with.
    attribute ResourceReference encounter (0..1);    // Encounter during which the condition was first asserted.
    attribute ResourceReference asserter (0..1);    // Person who takes responsibility for asserting the existence of the condition as part of the electronic record.
    attribute Date dateAsserted (0..1);    // Estimated or actual date the condition/problem/diagnosis was first detected/suspected.
    attribute CodeableConcept code (1..1);    // Identification of the condition, problem or diagnosis.
    attribute CodeableConcept category (0..1);    // A category assigned to the condition. E.g. complaint | symptom | finding | diagnosis.
    attribute ConditionStatus status (1..1);    // The clinical status of the condition.
    attribute CodeableConcept certainty (0..1);    // The degree of confidence that this condition is correct.
    attribute CodeableConcept severity (0..1);    // A subjective assessment of the severity of the condition as evaluated by the clinician.
    attribute Type onset (0..1);    // Estimated or actual date the condition began, in the opinion of the clinician.
    attribute Type abatement (0..1);    // The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
    attribute ConditionStageComponent stage (0..1);    // Clinical stage or grade of a condition. May include formal severity assessments.
    attribute ConditionEvidenceComponent evidence (0..-1);    // Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
    attribute ConditionLocationComponent location (0..-1);    // The anatomical location where this condition manifests itself.
    attribute ConditionRelatedItemComponent relatedItem (0..-1);    // Further conditions, problems, diagnoses, procedures or events that are related in some way to this condition, or the substance that caused/triggered this Condition.
    attribute String notes (0..1);    // Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
  }

  class Conformance extends Resource {    // A conformance statement is a set of requirements for a desired implementation or a description of how a target application fulfills those requirements in a particular implementation.
    enum ConformanceStatementStatus {    // The status of this conformance statement
      0 : Null = "Missing in instance";
      1 : draft = "This conformance statement is still under development.";
      2 : active = "This conformance statement is ready for use in production systems.";
      3 : retired = "This conformance statement has been withdrawn or superceded and should no longer be used.";
    }

    enum RestfulConformanceMode {    // The mode of a RESTful conformance statement
      0 : Null = "Missing in instance";
      1 : client = "The application acts as a server for this resource.";
      2 : server = "The application acts as a client for this resource.";
    }

    enum TypeRestfulInteraction {    // Operations supported by REST at the type or instance level
      0 : Null = "Missing in instance";
      1 : read = "";
      2 : vread = "";
      3 : update = "";
      4 : delete = "";
      5 : historyinstance = "";
      6 : validate = "";
      7 : historytype = "";
      8 : create = "";
      9 : searchtype = "";
    }

    enum SearchParamType {    // Data types allowed to be used for search parameters
      0 : Null = "Missing in instance";
      1 : number = "Search parameter SHALL be a number (a whole number, or a decimal).";
      2 : date = "Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.";
      3 : string = "Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.";
      4 : token = "Search parameter on a coded element or identifier. May be used to search through the text, displayname, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.";
      5 : reference = "A reference to another resource.";
      6 : composite = "A composite search parameter that combines a search on two values together.";
      7 : quantity = "A search parameter that searches on a quantity.";
    }

    enum SystemRestfulInteraction {    // Operations supported by REST at the system level
      0 : Null = "Missing in instance";
      1 : transaction = "";
      2 : searchsystem = "";
      3 : historysystem = "";
    }

    enum MessageSignificanceCategory {    // The impact of the content of a message
      0 : Null = "Missing in instance";
      1 : consequence = "The message represents/requests a change that should not be processed more than once. E.g. Making a booking for an appointment.";
      2 : currency = "The message represents a response to query for current information. Retrospective processing is wrong and/or wasteful.";
      3 : notification = "The content is not necessarily intended to be current, and it can be reprocessed, though there may be version issues created by processing old notifications.";
    }

    enum MessageConformanceEventMode {    // The mode of a message conformance statement
      0 : Null = "Missing in instance";
      1 : sender = "The application sends requests and receives responses.";
      2 : receiver = "The application receives requests and sends responses.";
    }

    enum DocumentMode {    // Whether the application produces or consumes documents
      0 : Null = "Missing in instance";
      1 : producer = "The application produces documents of the specified type.";
      2 : consumer = "The application consumes documents of the specified type.";
    }

    class ConformanceSoftwareComponent extends BackboneElement {
      attribute String name (1..1);    // Name software is known by.
      attribute String version (0..1);    // The version identifier for the software covered by this statement.
      attribute DateTime releaseDate (0..1);    // Date this version of the software released.
    }

    class ConformanceImplementationComponent extends BackboneElement {
      attribute String description (1..1);    // Information about the specific installation that this conformance statement relates to.
      attribute Uri url (0..1);    // A base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
    }

    class ConformanceRestComponent extends BackboneElement {
      attribute RestfulConformanceMode mode (1..1);    // Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.
      attribute String documentation (0..1);    // Information about the system's restful capabilities that apply across all applications, such as security.
      attribute ConformanceRestSecurityComponent security (0..1);    // Information about security of implementation.
      attribute ConformanceRestResourceComponent resource (1..-1);    // A specification of the restful capabilities of the solution for a specific resource type.
      attribute SystemInteractionComponent interaction (0..-1);    // A specification of restful operations supported by the system.
      attribute ConformanceRestOperationComponent operation (0..-1);    // Definition of an operation or a named query and with it's parameters and their meaning and type.
      attribute Uri documentMailbox (0..-1);    // A list of profiles that this server implements for accepting documents in the mailbox. If this list is empty, then documents are not accepted. The base specification has the profile identifier "http://hl7.org/fhir/documents/mailbox". Other specifications can declare their own identifier for this purpose.
    }

    class ConformanceRestSecurityComponent extends BackboneElement {
      attribute Boolean cors (0..1);    // Server adds CORS headers when responding to requests - this enables javascript applications to yuse the server.
      attribute CodeableConcept service (0..-1);    // Types of security services are supported/required by the system.
      attribute String description (0..1);    // General description of how security works.
      attribute ConformanceRestSecurityCertificateComponent certificate (0..-1);    // Certificates associated with security profiles.
    }

    class ConformanceRestSecurityCertificateComponent extends BackboneElement {
      attribute Code type (0..1);    // Mime type for certificate.
      attribute Base64Binary blob (0..1);    // Actual certificate.
    }

    class ConformanceRestResourceComponent extends BackboneElement {
      attribute Code type (1..1);    // A type of resource exposed via the restful interface.
      attribute ResourceReference profile (0..1);    // A specification of the profile that describes the solution's support for the resource, including any constraints on cardinality, bindings, lengths or other limitations.
      attribute ResourceInteractionComponent interaction (1..-1);    // Identifies a restful operation supported by the solution.
      attribute Boolean readHistory (0..1);    // A flag for whether the server is able to return past versions as part of the vRead operation.
      attribute Boolean updateCreate (0..1);    // A flag to indicate that the server allows the client to create new identities on the server. If the update operation is used (client) or allowed (server) to a new location where a resource doesn't already exist. This means that the server allows the client to create new identities on the server.
      attribute String searchInclude (0..-1);    // A list of _include values supported by the server.
      attribute ConformanceRestResourceSearchParamComponent searchParam (0..-1);    // Additional search parameters for implementations to support and/or make use of.
    }

    class ResourceInteractionComponent extends BackboneElement {
      attribute TypeRestfulInteraction code (1..1);    // Coded identifier of the operation, supported by the system resource.
      attribute String documentation (0..1);    // Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
    }

    class ConformanceRestResourceSearchParamComponent extends BackboneElement {
      attribute String name (1..1);    // The name of the search parameter used in the interface.
      attribute Uri definition (0..1);    // A formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter.
      attribute SearchParamType type (1..1);    // The type of value a search parameter refers to, and how the content is interpreted.
      attribute String documentation (0..1);    // This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
      attribute Code target (0..-1);    // Types of resource (if a resource is referenced).
      attribute String chain (0..-1);    // Chained names supported.
    }

    class SystemInteractionComponent extends BackboneElement {
      attribute SystemRestfulInteraction code (1..1);    // A coded identifier of the operation, supported by the system.
      attribute String documentation (0..1);    // Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
    }

    class ConformanceRestOperationComponent extends BackboneElement {
      attribute String name (1..1);    // The name of a query, which is used in the _query parameter when the query is called.
      attribute ResourceReference definition (1..1);    // Where the formal definition can be found.
    }

    class ConformanceMessagingComponent extends BackboneElement {
      attribute Uri endpoint (0..1);    // An address to which messages and/or replies are to be sent.
      attribute Integer reliableCache (0..1);    // Length if the receiver's reliable messaging cache (if a receiver) or how long the cache length on the receiver should be (if a sender).
      attribute String documentation (0..1);    // Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.
      attribute ConformanceMessagingEventComponent event (1..-1);    // A description of the solution's support for an event at this end point.
    }

    class ConformanceMessagingEventComponent extends BackboneElement {
      attribute Coding code (1..1);    // A coded identifier of a supported messaging event.
      attribute MessageSignificanceCategory category (0..1);    // The impact of the content of the message.
      attribute MessageConformanceEventMode mode (1..1);    // The mode of this event declaration - whether application is sender or receiver.
      attribute Coding protocol (0..-1);    // A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
      attribute Code focus (1..1);    // A resource associated with the event.  This is the resource that defines the event.
      attribute ResourceReference request (1..1);    // Information about the request for this event.
      attribute ResourceReference response (1..1);    // Information about the response for this event.
      attribute String documentation (0..1);    // Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
    }

    class ConformanceDocumentComponent extends BackboneElement {
      attribute DocumentMode mode (1..1);    // Mode of this document declaration - whether application is producer or consumer.
      attribute String documentation (0..1);    // A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.
      attribute ResourceReference profile (1..1);    // A constraint on a resource used in the document.
    }

    attribute String identifier (0..1);    // The identifier that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance (should be globally unique OID, UUID, or URI).
    attribute String version (0..1);    // The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    attribute String name (0..1);    // A free text natural language name identifying the conformance statement.
    attribute String publisher (1..1);    // Name of Organization publishing this conformance statement.
    attribute Contact telecom (0..-1);    // Contacts for Organization relevant to this conformance statement.  The contacts may be a website, email, phone numbers, etc.
    attribute String description (0..1);    // A free text natural language description of the conformance statement and its use. Typically, this is used when the profile describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
    attribute ConformanceStatementStatus status (0..1);    // The status of this conformance statement.
    attribute Boolean experimental (0..1);    // A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    attribute DateTime date (1..1);    // The date when the conformance statement was published.
    attribute ConformanceSoftwareComponent software (0..1);    // Software that is covered by this conformance statement.  It is used when the profile describes the capabilities of a particular software version, independent of an installation.
    attribute ConformanceImplementationComponent implementation (0..1);    // Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
    attribute Id fhirVersion (1..1);    // The version of the FHIR specification on which this conformance statement is based.
    attribute Boolean acceptUnknown (1..1);    // A flag that indicates whether the application accepts unknown elements as part of a resource.
    attribute Code format (1..-1);    // A list of the formats supported by this implementation.
    attribute ResourceReference profile (0..-1);    // A list of profiles supported by the system. For a server, "supported by the system" means the system hosts/produces a set of recourses, conformant to a particular profile, and allows its clients to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile.
    attribute ConformanceRestComponent rest (0..-1);    // A definition of the restful capabilities of the solution, if any.
    attribute ConformanceMessagingComponent messaging (0..-1);    // A description of the messaging capabilities of the solution.
    attribute ConformanceDocumentComponent document (0..-1);    // A document definition.
  }

  class Contraindication extends Resource {    // Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient.  E.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
    class ContraindicationMitigationComponent extends BackboneElement {
      attribute CodeableConcept action (1..1);    // Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified contraindication.
      attribute DateTime date (0..1);    // Indicates when the mitigating action was documented.
      attribute ResourceReference author (0..1);    // Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
    }

    attribute ResourceReference patient (0..1);    // Indicates the patient whose record the contraindication is associated with.
    attribute CodeableConcept category (0..1);    // Identifies the general type of issue identified.
    attribute Code severity (0..1);    // Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
    attribute ResourceReference implicated (0..-1);    // Indicates the resource representing the current activity or proposed activity that.
    attribute String detail (0..1);    // A textual explanation of the contraindication.
    attribute DateTime date (0..1);    // The date or date-time when the contraindication was initially identified.
    attribute ResourceReference author (0..1);    // Identifies the provider or software that identified the.
    attribute Identifier identifier (0..1);    // Business identifier associated with the contraindication record.
    attribute Uri reference (0..1);    // The literature, knowledge-base or similar reference that describes the propensity for the contraindication identified.
    attribute ContraindicationMitigationComponent mitigation (0..-1);    // Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the contraindicaiton from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
  }

  class DataElement extends Resource {    // The formal description of a single piece of information that can be gathered and reported.
    enum ResourceObservationDefStatus {    // The lifecycle status of a Resource data element
      0 : Null = "Missing in instance";
      1 : draft = "This data element is still under development.";
      2 : active = "This data element is ready for normal use.";
      3 : retired = "This data element has been deprecated, withdrawn or superseded and should no longer be used.";
    }

    enum BindingConformance {    // Binding conformance for applications
      0 : Null = "Missing in instance";
      1 : required = "Only codes in the specified set are allowed.  If the binding is extensible, other codes may be used for concepts not covered by the bound set of codes.";
      2 : preferred = "For greater interoperability, implementers are strongly encouraged to use the bound set of codes, however alternate codes may be used in derived profiles and implementations if necessary without being considered non-conformant.";
      3 : example = "The codes in the set are an example to illustrate the meaning of the field. There is no particular preference for its use nor any assertion that the provided values are sufficient to meet implementation needs.";
    }

    class DataElementBindingComponent extends BackboneElement {
      attribute Boolean isExtensible (1..1);    // If true, then conformant systems may use additional codes or (where the data type permits) text alone to convey concepts not covered by the set of codes identified in the binding.  If false, then conformant systems are constrained to the provided codes alone.
      attribute BindingConformance conformance (0..1);    // Indicates the degree of conformance expectations associated with this binding.
      attribute String description (0..1);    // Describes the intended use of this particular set of codes.
      attribute ResourceReference valueSet (0..1);    // Points to the value set that identifies the set of codes to be used.
    }

    class DataElementMappingComponent extends BackboneElement {
      attribute Uri uri (0..1);    // A URI that identifies the specification that this mapping is expressed to.
      attribute String name (0..1);    // A name for the specification that is being mapped to.
      attribute String comments (0..1);    // Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
      attribute String map (1..1);    // Expresses what part of the target specification corresponds to this element.
    }

    attribute Identifier identifier (0..1);    // The identifier that is used to identify this data element when it is referenced in a Profile, Questionnaire or an instance.
    attribute String version (0..1);    // The identifier that is used to identify this version of the data element when it is referenced in a Profile, Questionnaire or instance. This is an arbitrary value managed by the definition author manually.
    attribute String publisher (0..1);    // Details of the individual or organization who accepts responsibility for publishing the data element.
    attribute Contact telecom (0..-1);    // Contact details to assist a user in finding and communicating with the publisher.
    attribute ResourceObservationDefStatus status (1..1);    // The status of the data element.
    attribute DateTime date (0..1);    // The date that this version of the data element was published.
    attribute String name (0..1);    // The term used by humans to refer to the data element.  Should ideally be unique within the context in which the data element is expected to be used.
    attribute CodeableConcept category (0..-1);    // A set of terms from external terminologies that may be used to assist with indexing and searching of data element definitions.
    attribute Coding code (0..-1);    // A code that provides the meaning for a data element according to a particular terminology.
    attribute String question (0..1);    // The default/suggested phrasing to use when prompting a human to capture the data element.
    attribute String definition (0..1);    // Provides a complete explanation of the meaning of the data element for human readability.
    attribute String comments (0..1);    // Comments about the use of the element, including notes about how to use the data properly, exceptions to proper use, etc.
    attribute String requirements (0..1);    // Explains why this element is needed and why it's been constrained as it has.
    attribute String synonym (0..-1);    // Identifies additional names by which this element might also be known.
    attribute Code type (0..1);    // The FHIR data type that is the type for this element.
    attribute Type example (0..1);    // An example value for this element.
    attribute Integer maxLength (0..1);    // Indicates the shortest length that SHALL be supported by conformant instances without truncation.
    attribute CodeableConcept units (0..1);    // Identifies the units of measure in which the data element should be captured or expressed.
    attribute DataElementBindingComponent binding (0..1);    // Binds to a value set if this element is coded (code, Coding, CodeableConcept).
    attribute DataElementMappingComponent mapping (0..-1);    // Identifies a concept from an external specification that roughly corresponds to this element.
  }

  class Device extends Resource {    // This resource identifies an instance of a manufactured thing that is used in the provision of healthcare without being substantially changed through that activity. The device may be a machine, an insert, a computer, an application, etc. This includes durable (reusable) medical equipment as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.
    attribute Identifier identifier (0..-1);    // Identifiers assigned to this device by various organizations. The most likely organizations to assign identifiers are the manufacturer and the owner, though regulatory agencies may also assign an identifier. The identifiers identify the particular device, not the kind of device.
    attribute CodeableConcept type (1..1);    // A kind of this device.
    attribute String manufacturer (0..1);    // A name of the manufacturer.
    attribute String model (0..1);    // The "model" - an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type.
    attribute String version (0..1);    // The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware.
    attribute Date expiry (0..1);    // Date of expiry of this device (if applicable).
    attribute String udi (0..1);    // FDA Mandated Unique Device Identifier. Use the human readable information (the content that the user sees, which is sometimes different to the exact syntax represented in the barcode)  - see http://www.fda.gov/MedicalDevices/DeviceRegulationandGuidance/UniqueDeviceIdentification/default.htm.
    attribute String lotNumber (0..1);    // Lot number assigned by the manufacturer.
    attribute ResourceReference owner (0..1);    // An organization that is responsible for the provision and ongoing maintenance of the device.
    attribute ResourceReference location (0..1);    // The resource may be found in a literal location (i.e. GPS coordinates), a logical place (i.e. "in/with the patient"), or a coded location.
    attribute ResourceReference patient (0..1);    // Patient information, if the resource is affixed to a person.
    attribute Contact contact (0..-1);    // Contact details for an organization or a particular human that is responsible for the device.
    attribute Uri url (0..1);    // A network address on which the device may be contacted directly.
  }

  class DeviceObservationReport extends Resource {    // Describes the data produced by a device at a point in time.
    class DeviceObservationReportVirtualDeviceComponent extends BackboneElement {
      attribute CodeableConcept code (0..1);    // Describes the compartment.
      attribute DeviceObservationReportVirtualDeviceChannelComponent channel (0..-1);    // Groups together physiological measurement data and derived data.
    }

    class DeviceObservationReportVirtualDeviceChannelComponent extends BackboneElement {
      attribute CodeableConcept code (0..1);    // Describes the channel.
      attribute DeviceObservationReportVirtualDeviceChannelMetricComponent metric (0..-1);    // A piece of measured or derived data that is reported by the machine.
    }

    class DeviceObservationReportVirtualDeviceChannelMetricComponent extends BackboneElement {
      attribute ResourceReference observation (1..1);    // The data for the metric.
    }

    attribute Instant instant (1..1);    // The point in time that the values are reported.
    attribute Identifier identifier (0..1);    // An identifier assigned to this observation bu the source device that made the observation.
    attribute ResourceReference source (1..1);    // Identification information for the device that is the source of the data.
    attribute ResourceReference subject (0..1);    // The subject of the measurement.
    attribute DeviceObservationReportVirtualDeviceComponent virtualDevice (0..-1);    // A medical-related subsystem of a medical device.
  }

  class DiagnosticOrder extends Resource {    // A request for a diagnostic investigation service to be performed.
    enum DiagnosticOrderStatus {    // The status of a diagnostic order
      0 : Null = "Missing in instance";
      1 : requested = "The request has been placed.";
      2 : received = "The receiving system has received the order, but not yet decided whether it will be performed.";
      3 : accepted = "The receiving system has accepted the order, but work has not yet commenced.";
      4 : inProgress = "The work to fulfill the order is happening.";
      5 : review = "The work is complete, and the outcomes are being reviewed for approval.";
      6 : completed = "The work has been complete, the report(s) released, and no further work is planned.";
      7 : suspended = "The request has been held by originating system/user request.";
      8 : rejected = "The receiving system has declined to fulfill the request.";
      9 : failed = "The diagnostic investigation was attempted, but due to some procedural error, it could not be completed.";
    }

    enum DiagnosticOrderPriority {    // The clinical priority of a diagnostic order
      0 : Null = "Missing in instance";
      1 : routine = "The order has a normal priority.";
      2 : urgent = "The order should be urgently.";
      3 : stat = "The order is time-critical.";
      4 : asap = "The order should be acted on as soon as possible.";
    }

    class DiagnosticOrderEventComponent extends BackboneElement {
      attribute DiagnosticOrderStatus status (1..1);    // The status for the event.
      attribute CodeableConcept description (0..1);    // Additional information about the event that occurred - e.g. if the status remained unchanged.
      attribute DateTime dateTime (1..1);    // The date/time at which the event occurred.
      attribute ResourceReference actor (0..1);    // The person who was responsible for performing or recording the action.
    }

    class DiagnosticOrderItemComponent extends BackboneElement {
      attribute CodeableConcept code (1..1);    // A code that identifies a particular diagnostic investigation, or panel of investigations, that have been requested.
      attribute ResourceReference specimen (0..-1);    // If the item is related to a specific speciment.
      attribute CodeableConcept bodySite (0..1);    // Anatomical location where the request test should be performed.
      attribute DiagnosticOrderStatus status (0..1);    // The status of this individual item within the order.
      attribute DiagnosticOrderEventComponent event (0..-1);    // A summary of the events of interest that have occurred as this item of the request is processed.
    }

    attribute ResourceReference subject (1..1);    // Who or what the investigation is to be performed on. This is usually a human patient, but diagnostic tests can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
    attribute ResourceReference orderer (0..1);    // The practitioner that holds legal responsibility for ordering the investigation.
    attribute Identifier identifier (0..-1);    // Identifiers assigned to this order by the order or by the receiver.
    attribute ResourceReference encounter (0..1);    // An encounter that provides additional information about the healthcare context in which this request is made.
    attribute String clinicalNotes (0..1);    // An explanation or justification for why this diagnostic investigation is being requested.
    attribute ResourceReference supportingInformation (0..-1);    // Additional clinical information about the patient or specimen that may influence test interpretations.
    attribute ResourceReference specimen (0..-1);    // One or more specimens that the diagnostic investigation is about.
    attribute DiagnosticOrderStatus status (0..1);    // The status of the order.
    attribute DiagnosticOrderPriority priority (0..1);    // The clinical priority associated with this order.
    attribute DiagnosticOrderEventComponent event (0..-1);    // A summary of the events of interest that have occurred as the request is processed. E.g. when the order was made, various processing steps (specimens received), when it was completed.
    attribute DiagnosticOrderItemComponent item (0..-1);    // The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.
  }

  class DiagnosticReport extends Resource {    // The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretation, and formatted representation of diagnostic reports.
    enum DiagnosticReportStatus {    // The status of the diagnostic report as a whole
      0 : Null = "Missing in instance";
      1 : registered = "The existence of the report is registered, but there is nothing yet available.";
      2 : partial = "This is a partial (e.g. initial, interim or preliminary) report: data in the report may be incomplete or unverified.";
      3 : final_ = "The report is complete and verified by an authorized person.";
      4 : corrected = "The report has been modified subsequent to being Final, and is complete and verified by an authorized person.";
      5 : amended = "The report has been modified subsequent to being Final, and is complete and verified by an authorized person, and data has been changed.";
      6 : appended = "The report has been modified subsequent to being Final, and is complete and verified by an authorized person. New content has been added, but existing content hasn't changed.";
      7 : cancelled = "The report is unavailable because the measurement was not started or not completed (also sometimes called "aborted").";
      8 : enteredInError = "The report has been withdrawn following previous Final release.";
    }

    class DiagnosticReportImageComponent extends BackboneElement {
      attribute String comment (0..1);    // A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer's attention to important features.
      attribute ResourceReference link (1..1);    // Reference to the image source.
    }

    attribute CodeableConcept name (1..1);    // A code or name that describes this diagnostic report.
    attribute DiagnosticReportStatus status (1..1);    // The status of the diagnostic report as a whole.
    attribute DateTime issued (1..1);    // The date and/or time that this version of the report was released from the source diagnostic service.
    attribute ResourceReference subject (1..1);    // The subject of the report. Usually, but not always, this is a patient. However diagnostic services also perform analyses on specimens collected from a variety of other sources.
    attribute ResourceReference performer (1..1);    // The diagnostic service that is responsible for issuing the report.
    attribute Identifier identifier (0..1);    // The local ID assigned to the report by the order filler, usually by the Information System of the diagnostic service provider.
    attribute ResourceReference requestDetail (0..-1);    // Details concerning a test requested.
    attribute CodeableConcept serviceCategory (0..1);    // The section of the diagnostic service that performs the examination e.g. biochemistry, hematology, MRI.
    attribute Type diagnostic (1..1);    // The time or time-period the observed values are related to. This is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
    attribute ResourceReference specimen (0..-1);    // Details about the specimens on which this Disagnostic report is based.
    attribute ResourceReference result (0..-1);    // Observations that are part of this diagnostic report. Observations can be simple name/value pairs (e.g. "atomic" results), or they can be grouping observations that include references to other members of the group (e.g. "panels").
    attribute ResourceReference imagingStudy (0..-1);    // One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
    attribute DiagnosticReportImageComponent image (0..-1);    // A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
    attribute String conclusion (0..1);    // Concise and clinically contextualized narrative interpretation of the diagnostic report.
    attribute CodeableConcept codedDiagnosis (0..-1);    // Codes for the conclusion.
    attribute Attachment presentedForm (0..-1);    // Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
  }

  class DocumentManifest extends Resource {    // A manifest that defines a set of documents.
    enum DocumentReferenceStatus {    // The status of the document reference
      0 : Null = "Missing in instance";
      1 : current = "This is the current reference for this document.";
      2 : superceded = "This reference has been superseded by another reference.";
      3 : enteredInError = "This reference was created in error.";
    }

    attribute Identifier masterIdentifier (1..1);    // A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
    attribute Identifier identifier (0..-1);    // Other identifiers associated with the document, including version independent, source record and workflow related identifiers.
    attribute ResourceReference subject (1..-1);    // Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
    attribute ResourceReference recipient (0..-1);    // A patient, practitioner, or organization for which this set of documents is intended.
    attribute CodeableConcept type (0..1);    // Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
    attribute ResourceReference author (0..-1);    // Identifies who is responsible for adding the information to the document.
    attribute DateTime created (0..1);    // When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated etc).
    attribute Uri source (0..1);    // Identifies the source system, application, or software that produced the document manifest.
    attribute DocumentReferenceStatus status (1..1);    // The status of this document manifest.
    attribute ResourceReference supercedes (0..1);    // Whether this document manifest replaces another.
    attribute String description (0..1);    // Human-readable description of the source document. This is sometimes known as the "title".
    attribute CodeableConcept confidentiality (0..1);    // A code specifying the level of confidentiality of this set of Documents.
    attribute ResourceReference content (1..-1);    // The list of resources that describe the parts of this document reference. Usually, these would be document references, but direct references to binary attachments and images are also allowed.
  }

  class DocumentReference extends Resource {    // A reference to a document.
    enum DocumentReferenceStatus {    // The status of the document reference
      0 : Null = "Missing in instance";
      1 : current = "This is the current reference for this document.";
      2 : superceded = "This reference has been superseded by another reference.";
      3 : enteredInError = "This reference was created in error.";
    }

    enum DocumentRelationshipType {    // The type of relationship between documents
      0 : Null = "Missing in instance";
      1 : replaces = "This document logically replaces or supercedes the target document.";
      2 : transforms = "This document was generated by transforming the target document (e.g. format or language conversion).";
      3 : signs = "This document is a signature of the target document.";
      4 : appends = "This document adds additional information to the target document.";
    }

    class DocumentReferenceRelatesToComponent extends BackboneElement {
      attribute DocumentRelationshipType code (1..1);    // The type of relationship that this document has with anther document.
      attribute ResourceReference target (1..1);    // The target document of this relationship.
    }

    class DocumentReferenceServiceComponent extends BackboneElement {
      attribute CodeableConcept type (1..1);    // The type of the service that can be used to access the documents.
      attribute String address (0..1);    // Where the service end-point is located.
      attribute DocumentReferenceServiceParameterComponent parameter (0..-1);    // A list of named parameters that is used in the service call.
    }

    class DocumentReferenceServiceParameterComponent extends BackboneElement {
      attribute String name (1..1);    // The name of a parameter.
      attribute String value (0..1);    // The value of the named parameter.
    }

    class DocumentReferenceContextComponent extends BackboneElement {
      attribute CodeableConcept event (0..-1);    // This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
      attribute Period period (0..1);    // The time period over which the service that is described by the document was provided.
      attribute CodeableConcept facilityType (0..1);    // The kind of facility where the patient was seen.
    }

    attribute Identifier masterIdentifier (1..1);    // Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
    attribute Identifier identifier (0..-1);    // Other identifiers associated with the document, including version independent, source record and workflow related identifiers.
    attribute ResourceReference subject (1..1);    // Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (I.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
    attribute CodeableConcept type (1..1);    // Specifies the particular kind of document (e.g. Patient Summary, Discharge Summary, Prescription, etc.).
    attribute CodeableConcept class_ (0..1);    // A categorization for the type of the document. This may be implied by or derived from the code specified in the Document Type.
    attribute ResourceReference author (1..-1);    // Identifies who is responsible for adding the information to the document.
    attribute ResourceReference custodian (0..1);    // Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
    attribute Uri policyManager (0..1);    // A reference to a domain or server that manages policies under which the document is accessed and/or made available.
    attribute ResourceReference authenticator (0..1);    // Which person or organization authenticates that this document is valid.
    attribute DateTime created (0..1);    // When the document was created.
    attribute Instant indexed (1..1);    // When the document reference was created.
    attribute DocumentReferenceStatus status (1..1);    // The status of this document reference.
    attribute CodeableConcept docStatus (0..1);    // The status of the underlying document.
    attribute DocumentReferenceRelatesToComponent relatesTo (0..-1);    // Relationships that this document has with other document references that already exist.
    attribute String description (0..1);    // Human-readable description of the source document. This is sometimes known as the "title".
    attribute CodeableConcept confidentiality (0..-1);    // A code specifying the level of confidentiality of the XDS Document.
    attribute Code primaryLanguage (0..1);    // The primary language in which the source document is written.
    attribute Code mimeType (1..1);    // The mime type of the source document.
    attribute Uri format (0..-1);    // An identifier that identifies that the format and content of the document conforms to additional rules beyond the base format indicated in the mimeType.
    attribute Integer size (0..1);    // The size of the source document this reference refers to in bytes.
    attribute String hash (0..1);    // A hash of the source document to ensure that changes have not occurred.
    attribute Uri location (0..1);    // A url at which the document can be accessed.
    attribute DocumentReferenceServiceComponent service (0..1);    // A description of a service call that can be used to retrieve the document.
    attribute DocumentReferenceContextComponent context (0..1);    // The clinical context in which the document was prepared.
  }

  class Encounter extends Resource {    // An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
    enum EncounterState {    // Current state of the encounter
      0 : Null = "Missing in instance";
      1 : planned = "The Encounter has not yet started.";
      2 : inProgress = "The Encounter has begun and the patient is present / the practitioner and the patient are meeting.";
      3 : onleave = "The Encounter has begun, but the patient is temporarily on leave.";
      4 : finished = "The Encounter has ended.";
      5 : cancelled = "The Encounter has ended before it has begun.";
    }

    enum EncounterClass {    // Classification of the encounter
      0 : Null = "Missing in instance";
      1 : inpatient = "An encounter during which the patient is hospitalized and stays overnight.";
      2 : outpatient = "An encounter during which the patient is not hospitalized overnight.";
      3 : ambulatory = "An encounter where the patient visits the practitioner in his/her office, e.g. a G.P. visit.";
      4 : emergency = "An encounter where the patient needs urgent care.";
      5 : home = "An encounter where the practitioner visits the patient at his/her home.";
      6 : field = "An encounter taking place outside the regular environment for giving care.";
      7 : daytime = "An encounter where the patient needs more prolonged treatment or investigations than outpatients, but who do not need to stay in the hospital overnight.";
      8 : virtual = "An encounter that takes place where the patient and practitioner do not physically meet but use electronic means for contact.";
    }

    class EncounterParticipantComponent extends BackboneElement {
      attribute CodeableConcept type (0..-1);    // Role of participant in encounter.
      attribute ResourceReference individual (0..1);    // Persons involved in the encounter other than the patient.
    }

    class EncounterHospitalizationComponent extends BackboneElement {
      attribute Identifier preAdmissionIdentifier (0..1);    // Pre-admission identifier.
      attribute ResourceReference origin (0..1);    // The location from which the patient came before admission.
      attribute CodeableConcept admitSource (0..1);    // From where patient was admitted (physician referral, transfer).
      attribute Period period (0..1);    // Period during which the patient was admitted.
      attribute EncounterHospitalizationAccomodationComponent accomodation (0..-1);    // Where the patient stays during this encounter.
      attribute CodeableConcept diet (0..1);    // Dietary restrictions for the patient.
      attribute CodeableConcept specialCourtesy (0..-1);    // Special courtesies (VIP, board member).
      attribute CodeableConcept specialArrangement (0..-1);    // Wheelchair, translator, stretcher, etc.
      attribute ResourceReference destination (0..1);    // Location to which the patient is discharged.
      attribute CodeableConcept dischargeDisposition (0..1);    // Category or kind of location after discharge.
      attribute ResourceReference dischargeDiagnosis (0..1);    // The final diagnosis given a patient before release from the hospital after all testing, surgery, and workup are complete.
      attribute Boolean reAdmission (0..1);    // Whether this hospitalization is a readmission.
    }

    class EncounterHospitalizationAccomodationComponent extends BackboneElement {
      attribute ResourceReference bed (0..1);    // The bed that is assigned to the patient.
      attribute Period period (0..1);    // Period during which the patient was assigned the bed.
    }

    class EncounterLocationComponent extends BackboneElement {
      attribute ResourceReference location (1..1);    // The location where the encounter takes place.
      attribute Period period (0..1);    // Time period during which the patient was present at the location.
    }

    attribute Identifier identifier (0..-1);    // Identifier(s) by which this encounter is known.
    attribute EncounterState status (1..1);    // planned | in progress | onleave | finished | cancelled.
    attribute EncounterClass class_ (1..1);    // inpatient | outpatient | ambulatory | emergency +.
    attribute CodeableConcept type (0..-1);    // Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
    attribute ResourceReference subject (0..1);    // The patient present at the encounter.
    attribute EncounterParticipantComponent participant (0..-1);    // The main practitioner responsible for providing the service.
    attribute ResourceReference fulfills (0..1);    // The appointment that scheduled this encounter.
    attribute Period period (0..1);    // The start and end time of the encounter.
    attribute Duration length (0..1);    // Quantity of time the encounter lasted. This excludes the time during leaves of absence.
    attribute CodeableConcept reason (0..1);    // Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
    attribute ResourceReference indication (0..1);    // Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis.
    attribute CodeableConcept priority (0..1);    // Indicates the urgency of the encounter.
    attribute EncounterHospitalizationComponent hospitalization (0..1);    // Details about an admission to a clinic.
    attribute EncounterLocationComponent location (0..-1);    // List of locations at which the patient has been.
    attribute ResourceReference serviceProvider (0..1);    // Department or team providing care.
    attribute ResourceReference partOf (0..1);    // Another Encounter of which this encounter is a part of (administratively or in time).
  }

  class FamilyHistory extends Resource {    // Significant health events and conditions for people related to the subject relevant in the context of care for the subject.
    class FamilyHistoryRelationComponent extends BackboneElement {
      attribute String name (0..1);    // This will either be a name or a description.  E.g. "Aunt Susan", "my cousin with the red hair".
      attribute CodeableConcept relationship (1..1);    // The type of relationship this person has to the patient (father, mother, brother etc.).
      attribute Type born (0..1);    // The actual or approximate date of birth of the relative.
      attribute Type age (0..1);    // The actual or approximate age of the relative at the time the family history is recorded.
      attribute Type deceased (0..1);    // If this resource is indicating that the related person is deceased, then an indicator of whether the person is deceased (yes) or not (no) or the age or age range or description of age at death - can be indicated here. If the reason for death is known, then it can be indicated in the outcome code of the condition - in this case the deceased property should still be set.
      attribute String note (0..1);    // This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
      attribute FamilyHistoryRelationConditionComponent condition (0..-1);    // The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
    }

    class FamilyHistoryRelationConditionComponent extends BackboneElement {
      attribute CodeableConcept type (1..1);    // The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
      attribute CodeableConcept outcome (0..1);    // Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
      attribute Type onset (0..1);    // Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
      attribute String note (0..1);    // An area where general notes can be placed about this specific condition.
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this family history record that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute ResourceReference subject (1..1);    // The person who this history concerns.
    attribute DateTime date (0..1);    // The date (and possibly time) when the family history was taken.
    attribute String note (0..1);    // Conveys information about family history not specific to individual relations.
    attribute FamilyHistoryRelationComponent relation (0..-1);    // The related person. Each FamilyHistory resource contains the entire family history for a single person.
  }

  class Group extends Resource {    // Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized.  I.e. A collection of entities that isn't an Organization.
    enum GroupType {    // Types of resources that are part of group
      0 : Null = "Missing in instance";
      1 : person = "Group contains "person" Patient resources.";
      2 : animal = "Group contains "animal" Patient resources.";
      3 : practitioner = "Group contains healthcare practitioner resources.";
      4 : device = "Group contains Device resources.";
      5 : medication = "Group contains Medication resources.";
      6 : substance = "Group contains Substance resources.";
    }

    class GroupCharacteristicComponent extends BackboneElement {
      attribute CodeableConcept code (1..1);    // A code that identifies the kind of trait being asserted.
      attribute Type value (1..1);    // The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
      attribute Boolean exclude (1..1);    // If true, indicates the characteristic is one that is NOT held by members of the group.
    }

    attribute Identifier identifier (0..1);    // A unique business identifier for this group.
    attribute GroupType type (1..1);    // Identifies the broad classification of the kind of resources the group includes.
    attribute Boolean actual (1..1);    // If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
    attribute CodeableConcept code (0..1);    // Provides a specific type of resource the group includes.  E.g. "cow", "syringe", etc.
    attribute String name (0..1);    // A label assigned to the group for human identification and communication.
    attribute Integer quantity (0..1);    // A count of the number of resource instances that are part of the group.
    attribute GroupCharacteristicComponent characteristic (0..-1);    // Identifies the traits shared by members of the group.
    attribute ResourceReference member (0..-1);    // Identifies the resource instances that are members of the group.
  }

  class ImagingStudy extends Resource {    // Manifest of a set of images produced in study. The set of images may include every image in the study, or it may be an incomplete sample, such as a list of key images.
    enum ImagingModality {    // Type of acquired image data in the instance
      0 : Null = "Missing in instance";
      1 : aR = "";
      2 : bMD = "";
      3 : bDUS = "";
      4 : ePS = "";
      5 : cR = "";
      6 : cT = "";
      7 : dX = "";
      8 : eCG = "";
      9 : eS = "";
      10 : xC = "";
      11 : gM = "";
      12 : hD = "";
      13 : iO = "";
      14 : iVOCT = "";
      15 : iVUS = "";
      16 : kER = "";
      17 : lEN = "";
      18 : mR = "";
      19 : mG = "";
      20 : nM = "";
      21 : oAM = "";
      22 : oCT = "";
      23 : oPM = "";
      24 : oP = "";
      25 : oPR = "";
      26 : oPT = "";
      27 : oPV = "";
      28 : pX = "";
      29 : pT = "";
      30 : rF = "";
      31 : rG = "";
      32 : sM = "";
      33 : sRF = "";
      34 : uS = "";
      35 : vA = "";
      36 : xA = "";
    }

    enum InstanceAvailability {    // Availability of the resource
      0 : Null = "Missing in instance";
      1 : oNLINE = "Resources are immediately available,.";
      2 : oFFLINE = "Resources need to be retrieved by manual intervention.";
      3 : nEARLINE = "Resources need to be retrieved from relatively slow media.";
      4 : uNAVAILABLE = "Resources cannot be retrieved.";
    }

    enum Modality {    // Type of data in the instance
      0 : Null = "Missing in instance";
      1 : aR = "";
      2 : aU = "";
      3 : bDUS = "";
      4 : bI = "";
      5 : bMD = "";
      6 : cR = "";
      7 : cT = "";
      8 : dG = "";
      9 : dX = "";
      10 : eCG = "";
      11 : ePS = "";
      12 : eS = "";
      13 : gM = "";
      14 : hC = "";
      15 : hD = "";
      16 : iO = "";
      17 : iVOCT = "";
      18 : iVUS = "";
      19 : kER = "";
      20 : kO = "";
      21 : lEN = "";
      22 : lS = "";
      23 : mG = "";
      24 : mR = "";
      25 : nM = "";
      26 : oAM = "";
      27 : oCT = "";
      28 : oP = "";
      29 : oPM = "";
      30 : oPT = "";
      31 : oPV = "";
      32 : oT = "";
      33 : pR = "";
      34 : pT = "";
      35 : pX = "";
      36 : rEG = "";
      37 : rF = "";
      38 : rG = "";
      39 : rTDOSE = "";
      40 : rTIMAGE = "";
      41 : rTPLAN = "";
      42 : rTRECORD = "";
      43 : rTSTRUCT = "";
      44 : sEG = "";
      45 : sM = "";
      46 : sMR = "";
      47 : sR = "";
      48 : sRF = "";
      49 : tG = "";
      50 : uS = "";
      51 : vA = "";
      52 : xA = "";
      53 : xC = "";
    }

    class ImagingStudySeriesComponent extends BackboneElement {
      attribute Integer number (0..1);    // The number of this series in the overall sequence.
      attribute Modality modality (1..1);    // The modality of this series sequence.
      attribute Oid uid (1..1);    // Formal identifier for this series.
      attribute String description (0..1);    // A description of the series.
      attribute Integer numberOfInstances (1..1);    // Sequence that contains attributes from the.
      attribute InstanceAvailability availability (0..1);    // Availability of series (online, offline or nearline).
      attribute Uri url (0..1);    // WADO-RS URI where Series is available.
      attribute Coding bodySite (0..1);    // Body part examined. See  DICOM Part 16 Annex L for the mapping from DICOM to Snomed.
      attribute DateTime dateTime (0..1);    // When the series started.
      attribute ImagingStudySeriesInstanceComponent instance (1..-1);    // A single image taken from a patient.
    }

    class ImagingStudySeriesInstanceComponent extends BackboneElement {
      attribute Integer number (0..1);    // The number of this image in the series.
      attribute Oid uid (1..1);    // Formal identifier for this image.
      attribute Oid sopclass (1..1);    // DICOM Image type.
      attribute String type (0..1);    // Type of instance (image etc) (0004,1430).
      attribute String title (0..1);    // Description (0070,0080 | 0040,A043 > 0008,0104 | 0042,0010 | 0008,0008).
      attribute Uri url (0..1);    // WADO-RS url where image is available.
      attribute ResourceReference attachment (0..1);    // A FHIR resource with content for this instance.
    }

    attribute DateTime dateTime (0..1);    // Date and Time the study took place.
    attribute ResourceReference subject (1..1);    // Who the images are of.
    attribute Oid uid (1..1);    // Formal identifier for the study.
    attribute Identifier accessionNo (0..1);    // Accession Number.
    attribute Identifier identifier (0..-1);    // Other identifiers for the study.
    attribute ResourceReference order (0..-1);    // A list of the diagnostic orders that resulted in this imaging study being performed.
    attribute ImagingModality modality (0..-1);    // A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
    attribute ResourceReference referrer (0..1);    // The requesting/referring physician.
    attribute InstanceAvailability availability (0..1);    // Availability of study (online, offline or nearline).
    attribute Uri url (0..1);    // WADO-RS URI where Study is available.
    attribute Integer numberOfSeries (1..1);    // Number of Series in Study.
    attribute Integer numberOfInstances (1..1);    // Number of SOP Instances in Study.
    attribute String clinicalInformation (0..1);    // Diagnoses etc provided with request.
    attribute Coding procedure (0..-1);    // Type of procedure performed.
    attribute ResourceReference interpreter (0..1);    // Who read study and interpreted the images.
    attribute String description (0..1);    // Institution-generated description or classification of the Study (component) performed.
    attribute ImagingStudySeriesComponent series (0..-1);    // Each study has one or more series of image instances.
  }

  class Immunization extends Resource {    // Immunization event information.
    class ImmunizationExplanationComponent extends BackboneElement {
      attribute CodeableConcept reason (0..-1);    // Reasons why a vaccine was administered.
      attribute CodeableConcept refusalReason (0..-1);    // Refusal or exemption reasons.
    }

    class ImmunizationReactionComponent extends BackboneElement {
      attribute DateTime date (0..1);    // Date of reaction to the immunization.
      attribute ResourceReference detail (0..1);    // Details of the reaction.
      attribute Boolean reported (0..1);    // Self-reported indicator.
    }

    class ImmunizationVaccinationProtocolComponent extends BackboneElement {
      attribute Integer doseSequence (1..1);    // Nominal position in a series.
      attribute String description (0..1);    // Contains the description about the protocol under which the vaccine was administered.
      attribute ResourceReference authority (0..1);    // Indicates the authority who published the protocol?  E.g. ACIP.
      attribute String series (0..1);    // One possible path to achieve presumed immunity against a disease - within the context of an authority.
      attribute Integer seriesDoses (0..1);    // The recommended number of doses to achieve immunity.
      attribute CodeableConcept doseTarget (1..1);    // The targeted disease.
      attribute CodeableConcept doseStatus (1..1);    // Indicates if the immunization event should "count" against  the protocol.
      attribute CodeableConcept doseStatusReason (0..1);    // Provides an explanation as to why a immunization event should or should not count against the protocol.
    }

    attribute Identifier identifier (0..-1);    // A unique identifier assigned to this adverse reaction record.
    attribute DateTime date (1..1);    // Date vaccine administered or was to be administered.
    attribute CodeableConcept vaccineType (1..1);    // Vaccine that was administered or was to be administered.
    attribute ResourceReference subject (1..1);    // The patient to whom the vaccine was to be administered.
    attribute Boolean refusedIndicator (1..1);    // Indicates if the vaccination was refused.
    attribute Boolean reported (1..1);    // True if this administration was reported rather than directly administered.
    attribute ResourceReference performer (0..1);    // Clinician who administered the vaccine.
    attribute ResourceReference requester (0..1);    // Clinician who ordered the vaccination.
    attribute ResourceReference manufacturer (0..1);    // Name of vaccine manufacturer.
    attribute ResourceReference location (0..1);    // The service delivery location where the vaccine administration occurred.
    attribute String lotNumber (0..1);    // Lot number of the  vaccine product.
    attribute Date expirationDate (0..1);    // Date vaccine batch expires.
    attribute CodeableConcept site (0..1);    // Body site where vaccine was administered.
    attribute CodeableConcept route (0..1);    // The path by which the vaccine product is taken into the body.
    attribute Quantity doseQuantity (0..1);    // The quantity of vaccine product that was administered.
    attribute ImmunizationExplanationComponent explanation (0..1);    // Reasons why a vaccine was administered or refused.
    attribute ImmunizationReactionComponent reaction (0..-1);    // Categorical data indicating that an adverse event is associated in time to an immunization.
    attribute ImmunizationVaccinationProtocolComponent vaccinationProtocol (0..-1);    // Contains information about the protocol(s) under which the vaccine was administered.
  }

  class ImmunizationRecommendation extends Resource {    // A patient's point-of-time immunization status and recommendation with optional supporting justification.
    class ImmunizationRecommendationRecommendationComponent extends BackboneElement {
      attribute DateTime date (1..1);    // The date the immunization recommendation was created.
      attribute CodeableConcept vaccineType (1..1);    // Vaccine that pertains to the recommendation.
      attribute Integer doseNumber (0..1);    // This indicates the next recommended dose number (e.g. dose 2 is the next recommended dose).
      attribute CodeableConcept forecastStatus (1..1);    // Vaccine administration status.
      attribute ImmunizationRecommendationRecommendationDateCriterionComponent dateCriterion (0..-1);    // Vaccine date recommendations - e.g. earliest date to administer, latest date to administer, etc.
      attribute ImmunizationRecommendationRecommendationProtocolComponent protocol (0..1);    // Contains information about the protocol under which the vaccine was administered.
      attribute ResourceReference supportingImmunization (0..-1);    // Immunization event history that supports the status and recommendation.
      attribute ResourceReference supportingPatientInformation (0..-1);    // Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
    }

    class ImmunizationRecommendationRecommendationDateCriterionComponent extends BackboneElement {
      attribute CodeableConcept code (1..1);    // Date classification of recommendation - e.g. earliest date to give, latest date to give, etc.
      attribute DateTime value (1..1);    // Date recommendation.
    }

    class ImmunizationRecommendationRecommendationProtocolComponent extends BackboneElement {
      attribute Integer doseSequence (0..1);    // Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.
      attribute String description (0..1);    // Contains the description about the protocol under which the vaccine was administered.
      attribute ResourceReference authority (0..1);    // Indicates the authority who published the protocol?  E.g. ACIP.
      attribute String series (0..1);    // One possible path to achieve presumed immunity against a disease - within the context of an authority.
    }

    attribute Identifier identifier (0..-1);    // A unique identifier assigned to this particular recommendation record.
    attribute ResourceReference subject (1..1);    // The patient who is the subject of the profile.
    attribute ImmunizationRecommendationRecommendationComponent recommendation (1..-1);    // Vaccine administration recommendations.
  }

  class List extends Resource {    // A set of information summarized from a list of other resources.
    enum ListMode {    // The processing mode that applies to this list
      0 : Null = "Missing in instance";
      1 : working = "This list is the master list, maintained in an ongoing fashion with regular updates as the real world list it is tracking changes.";
      2 : snapshot = "This list was prepared as a snapshot. It should not be assumed to be current.";
      3 : changes = "The list is prepared as a statement of changes that have been made or recommended.";
    }

    class ListEntryComponent extends BackboneElement {
      attribute CodeableConcept flag (0..-1);    // The flag allows the system constructing the list to make one or more statements about the role and significance of the item in the list.
      attribute Boolean deleted (0..1);    // True if this item is marked as deleted in the list.
      attribute DateTime date (0..1);    // When this item was added to the list.
      attribute ResourceReference item (1..1);    // A reference to the actual resource from which data was derived.
    }

    attribute Identifier identifier (0..-1);    // Identifier for the List assigned for business purposes outside the context of FHIR.
    attribute CodeableConcept code (0..1);    // This code defines the purpose of the list - why it was created.
    attribute ResourceReference subject (0..1);    // The common subject (or patient) of the resources that are in the list, if there is one.
    attribute ResourceReference source (0..1);    // The entity responsible for deciding what the contents of the list were.
    attribute DateTime date (0..1);    // The date that the list was prepared.
    attribute Boolean ordered (0..1);    // Whether items in the list have a meaningful order.
    attribute ListMode mode (1..1);    // How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
    attribute ListEntryComponent entry (0..-1);    // Entries in this list.
    attribute CodeableConcept emptyReason (0..1);    // If the list is empty, why the list is empty.
  }

  class Location extends Resource {    // Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
    enum LocationStatus {    // Indicates whether the location is still in use
      0 : Null = "Missing in instance";
      1 : active = "The location is operational.";
      2 : suspended = "The location is temporarily closed.";
      3 : inactive = "The location is no longer used.";
    }

    enum LocationMode {    // Indicates whether a resource instance represents a specific location or a class of locations
      0 : Null = "Missing in instance";
      1 : instance = "The Location resource represents a specific instance of a Location.";
      2 : kind = "The Location represents a class of Locations.";
    }

    class LocationPositionComponent extends BackboneElement {
      attribute Decimal longitude (1..1);    // Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
      attribute Decimal latitude (1..1);    // Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
      attribute Decimal altitude (0..1);    // Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
    }

    attribute Identifier identifier (0..-1);    // Unique code or number identifying the location to its users.
    attribute String name (0..1);    // Name of the location as used by humans. Does not need to be unique.
    attribute String description (0..1);    // Description of the Location, which helps in finding or referencing the place.
    attribute CodeableConcept type (0..1);    // Indicates the type of function performed at the location.
    attribute Contact telecom (0..-1);    // The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
    attribute Address address (0..1);    // Physical location.
    attribute CodeableConcept physicalType (0..1);    // Physical form of the location, e.g. building, room, vehicle, road.
    attribute LocationPositionComponent position (0..1);    // The absolute geographic location of the Location, expressed in a KML compatible manner (see notes below for KML).
    attribute ResourceReference managingOrganization (0..1);    // The organization that is responsible for the provisioning and upkeep of the location.
    attribute LocationStatus status (0..1);    // active | suspended | inactive.
    attribute ResourceReference partOf (0..1);    // Another Location which this Location is physically part of.
    attribute LocationMode mode (0..1);    // Indicates whether a resource instance represents a specific location or a class of locations.
  }

  class Media extends Resource {    // A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
    enum MediaType {    // Whether the Media is a photo, video, or audio
      0 : Null = "Missing in instance";
      1 : photo = "The media consists of one or more unmoving images, including photographs, computer-generated graphs and charts, and scanned documents.";
      2 : video = "The media consists of a series of frames that capture a moving image.";
      3 : audio = "The media consists of a sound recording.";
    }

    attribute MediaType type (1..1);    // Whether the media is a photo (still image), an audio recording, or a video recording.
    attribute CodeableConcept subtype (0..1);    // Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
    attribute Identifier identifier (0..-1);    // Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
    attribute DateTime dateTime (0..1);    // When the media was originally recorded. For video and audio, if the length of the recording is not insignificant, this is the end of the recording.
    attribute ResourceReference subject (0..1);    // Who/What this Media is a record of.
    attribute ResourceReference operator (0..1);    // The person who administered the collection of the image.
    attribute CodeableConcept view (0..1);    // The name of the imaging view e.g Lateral or Antero-posterior (AP).
    attribute String deviceName (0..1);    // The name of the device / manufacturer of the device  that was used to make the recording.
    attribute Integer height (0..1);    // Height of the image in pixels(photo/video).
    attribute Integer width (0..1);    // Width of the image in pixels (photo/video).
    attribute Integer frames (0..1);    // The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
    attribute Integer length (0..1);    // The length of the recording in seconds - for audio and video.
    attribute Attachment content (1..1);    // The actual content of the media - inline or by direct reference to the media source file.
  }

  class Medication extends Resource {    // Primarily used for identification and definition of Medication, but also covers ingredients and packaging.
    enum MedicationKind {    // Whether the medication is a product or a package
      0 : Null = "Missing in instance";
      1 : product = "The medication is a product.";
      2 : package_ = "The medication is a package - a contained group of one of more products.";
    }

    class MedicationProductComponent extends BackboneElement {
      attribute CodeableConcept form (0..1);    // Describes the form of the item.  Powder; tables; carton.
      attribute MedicationProductIngredientComponent ingredient (0..-1);    // Identifies a particular constituent of interest in the product.
    }

    class MedicationProductIngredientComponent extends BackboneElement {
      attribute ResourceReference item (1..1);    // The actual ingredient - either a substance (simple ingredient) or another medication.
      attribute Ratio amount (0..1);    // Specifies how many (or how much) of the items there are in this Medication.  E.g. 250 mg per tablet.
    }

    class MedicationPackageComponent extends BackboneElement {
      attribute CodeableConcept container (0..1);    // The kind of container that this package comes as.
      attribute MedicationPackageContentComponent content (0..-1);    // A set of components that go to make up the described item.
    }

    class MedicationPackageContentComponent extends BackboneElement {
      attribute ResourceReference item (1..1);    // Identifies one of the items in the package.
      attribute Quantity amount (0..1);    // The amount of the product that is in the package.
    }

    attribute String name (0..1);    // The common/commercial name of the medication absent information such as strength, form, etc.  E.g. Acetaminophen, Tylenol 3, etc.  The fully coordinated name is communicated as the display of Medication.code.
    attribute CodeableConcept code (0..1);    // A code (or set of codes) that identify this medication.   Usage note: This could be a standard drug code such as a drug regulator code, RxNorm code, SNOMED CT code, etc. It could also be a local formulary code, optionally with translations to the standard drug codes.
    attribute Boolean isBrand (0..1);    // Set to true if the item is attributable to a specific manufacturer (even if we don't know who that is).
    attribute ResourceReference manufacturer (0..1);    // Describes the details of the manufacturer.
    attribute MedicationKind kind (0..1);    // Medications are either a single administrable product or a package that contains one or more products.
    attribute MedicationProductComponent product (0..1);    // Information that only applies to products (not packages).
    attribute MedicationPackageComponent package_ (0..1);    // Information that only applies to packages (not products).
  }

  class MedicationAdministration extends Resource {    // Describes the event of a patient being given a dose of a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
    enum MedicationAdminStatus {    // A set of codes indicating the current status of a MedicationAdministration
      0 : Null = "Missing in instance";
      1 : inProgress = "The administration has started but has not yet completed.";
      2 : onHold = "Actions implied by the administration have been temporarily halted, but are expected to continue later. May also be called "suspended".";
      3 : completed = "All actions that are implied by the administration have occurred.";
      4 : enteredInError = "The administration was entered in error and therefore nullified.";
      5 : stopped = "Actions implied by the administration have been permanently halted, before all of them occurred.";
    }

    class MedicationAdministrationDosageComponent extends BackboneElement {
      attribute Type timing (0..1);    // The timing schedule for giving the medication to the patient.  This may be a single time point (using dateTime) or it may be a start and end dateTime (Period).
      attribute Type asNeeded (0..1);    // If set to true or if specified as a CodeableConcept, indicates that the medication is only taken when needed within the specified schedule rather than at every scheduled dose.  If a CodeableConcept is present, it indicates the pre-condition for taking the Medication.
      attribute CodeableConcept site (0..1);    // A coded specification of the anatomic site where the medication first entered the body.  E.g. "left arm".
      attribute CodeableConcept route (0..1);    // A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.   E.g. topical, intravenous, etc.
      attribute CodeableConcept method (0..1);    // A coded value indicating the method by which the medication was introduced into or onto the body. Most commonly used for injections.  Examples:  Slow Push; Deep IV.  Terminologies used often pre-coordinate this term with the route and or form of administration.
      attribute Quantity quantity (0..1);    // The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
      attribute Ratio rate (0..1);    // Identifies the speed with which the medication was introduced into the patient. Typically the rate for an infusion e.g. 200ml in 2 hours.  May also expressed as a rate per unit of time such as 100ml per hour - the duration is then not specified, or is specified in the quantity.
      attribute Ratio maxDosePerPeriod (0..1);    // The maximum total quantity of a therapeutic substance that was administered to the patient over the specified period of time. E.g. 1000mg in 24 hours.
    }

    attribute Identifier identifier (0..-1);    // External identifier - FHIR will generate its own internal IDs (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
    attribute MedicationAdminStatus status (1..1);    // Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
    attribute ResourceReference patient (1..1);    // The person or animal to whom the medication was given.
    attribute ResourceReference practitioner (1..1);    // The individual who was responsible for giving the medication to the patient.
    attribute ResourceReference encounter (0..1);    // The visit or admission the or other contact between patient and health care provider the medication administration was performed as part of.
    attribute ResourceReference prescription (1..1);    // The original request, instruction or authority to perform the administration.
    attribute Boolean wasNotGiven (0..1);    // Set this to true if the record is saying that the medication was NOT administered.
    attribute CodeableConcept reasonNotGiven (0..-1);    // A code indicating why the administration was not performed.
    attribute Period whenGiven (1..1);    // An interval of time during which the administration took place.  For many administrations, such as swallowing a tablet the lower and upper values of the interval will be the same.
    attribute ResourceReference medication (0..1);    // Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    attribute ResourceReference device (0..-1);    // The device used in administering the medication to the patient.  E.g. a particular infusion pump.
    attribute MedicationAdministrationDosageComponent dosage (0..-1);    // Provides details of how much of the medication was administered.
  }

  class MedicationDispense extends Resource {    // Dispensing a medication to a named patient.  This includes a description of the supply provided and the instructions for administering the medication.
    enum MedicationDispenseStatus {    // A code specifying the state of the dispense event.
      0 : Null = "Missing in instance";
      1 : inProgress = "The dispense has started but has not yet completed.";
      2 : onHold = "Actions implied by the administration have been temporarily halted, but are expected to continue later. May also be called "suspended".";
      3 : completed = "All actions that are implied by the dispense have occurred.";
      4 : enteredInError = "The dispense was entered in error and therefore nullified.";
      5 : stopped = "Actions implied by the dispense have been permanently halted, before all of them occurred.";
    }

    class MedicationDispenseDispenseComponent extends BackboneElement {
      attribute Identifier identifier (0..1);    // Identifier assigned by the dispensing facility.   This is an identifier assigned outside FHIR.
      attribute MedicationDispenseStatus status (0..1);    // A code specifying the state of the dispense event.
      attribute CodeableConcept type (0..1);    // Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
      attribute Quantity quantity (0..1);    // The amount of medication that has been dispensed. Includes unit of measure.
      attribute ResourceReference medication (0..1);    // Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
      attribute DateTime whenPrepared (0..1);    // The time when the dispensed product was packaged and reviewed.
      attribute DateTime whenHandedOver (0..1);    // The time the dispensed product was provided to the patient or their representative.
      attribute ResourceReference destination (0..1);    // Identification of the facility/location where the medication was shipped to, as part of the dispense event.
      attribute ResourceReference receiver (0..-1);    // Identifies the person who picked up the medication.  This will usually be a patient or their carer, but some cases exist where it can be a healthcare professional.
      attribute MedicationDispenseDispenseDosageComponent dosage (0..-1);    // Indicates how the medication is to be used by the patient.
    }

    class MedicationDispenseDispenseDosageComponent extends BackboneElement {
      attribute CodeableConcept additionalInstructions (0..1);    // Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
      attribute Type timing (0..1);    // The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions, for example.  "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
      attribute Type asNeeded (0..1);    // If set to true or if specified as a CodeableConcept, indicates that the medication is only taken when needed within the specified schedule rather than at every scheduled dose.  If a CodeableConcept is present, it indicates the pre-condition for taking the Medication.
      attribute CodeableConcept site (0..1);    // A coded specification of the anatomic site where the medication first enters the body.
      attribute CodeableConcept route (0..1);    // A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
      attribute CodeableConcept method (0..1);    // A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  Examples:  Slow Push; Deep IV.  Terminologies used often pre-coordinate this term with the route and or form of administration.
      attribute Quantity quantity (0..1);    // The amount of therapeutic or other substance given at one administration event.
      attribute Ratio rate (0..1);    // Identifies the speed with which the substance is introduced into the subject. Typically the rate for an infusion. 200ml in 2 hours.
      attribute Ratio maxDosePerPeriod (0..1);    // The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time,  e.g. 1000mg in 24 hours.
    }

    class MedicationDispenseSubstitutionComponent extends BackboneElement {
      attribute CodeableConcept type (1..1);    // A code signifying whether a different drug was dispensed from what was prescribed.
      attribute CodeableConcept reason (0..-1);    // Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
      attribute ResourceReference responsibleParty (0..-1);    // The person or organization that has primary responsibility for the substitution.
    }

    attribute Identifier identifier (0..1);    // Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
    attribute MedicationDispenseStatus status (0..1);    // A code specifying the state of the set of dispense events.
    attribute ResourceReference patient (0..1);    // A link to a resource representing the person to whom the medication will be given.
    attribute ResourceReference dispenser (0..1);    // The individual responsible for dispensing the medication.
    attribute ResourceReference authorizingPrescription (0..-1);    // Indicates the medication order that is being dispensed against.
    attribute MedicationDispenseDispenseComponent dispense (0..-1);    // Indicates the details of the dispense event such as the days supply and quantity of medication dispensed.
    attribute MedicationDispenseSubstitutionComponent substitution (0..1);    // Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but doesn't happen, in other cases substitution is not expected but does happen.  This block explains what substitition did or did not happen and why.
  }

  class MedicationPrescription extends Resource {    // An order for both supply of the medication and the instructions for administration of the medicine to a patient.
    enum MedicationPrescriptionStatus {    // A code specifying the state of the prescribing event. Describes the lifecycle of the prescription.
      0 : Null = "Missing in instance";
      1 : active = "The prescription is 'actionable', but not all actions that are implied by it have occurred yet.";
      2 : onHold = "Actions implied by the prescription have been temporarily halted, but are expected to continue later.  May also be called "suspended".";
      3 : completed = "All actions that are implied by the prescription have occurred (this will rarely be made explicit).";
      4 : enteredInError = "The prescription was entered in error and therefore nullified.";
      5 : stopped = "Actions implied by the prescription have been permanently halted, before all of them occurred.";
      6 : superceded = "The prescription was replaced by a newer one, which encompasses all the information in the previous one.";
    }

    class MedicationPrescriptionDosageInstructionComponent extends BackboneElement {
      attribute String text (0..1);    // Free text dosage instructions for cases where the instructions are too complex to code.
      attribute CodeableConcept additionalInstructions (0..1);    // Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
      attribute Type timing (0..1);    // The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions, for example.  "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
      attribute Type asNeeded (0..1);    // If set to true or if specified as a CodeableConcept, indicates that the medication is only taken when needed within the specified schedule rather than at every scheduled dose.  If a CodeableConcept is present, it indicates the pre-condition for taking the Medication.
      attribute CodeableConcept site (0..1);    // A coded specification of the anatomic site where the medication first enters the body.
      attribute CodeableConcept route (0..1);    // A code specifying the route or physiological path of administration of a therapeutic agent into or onto a patient.
      attribute CodeableConcept method (0..1);    // A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  Examples:  Slow Push; Deep IV.  Terminologies used often pre-coordinate this term with the route and or form of administration.
      attribute Quantity doseQuantity (0..1);    // The amount of therapeutic or other substance given at one administration event.
      attribute Ratio rate (0..1);    // Identifies the speed with which the substance is introduced into the subject. Typically the rate for an infusion. 200ml in 2 hours.
      attribute Ratio maxDosePerPeriod (0..1);    // The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time. E.g. 1000mg in 24 hours.
    }

    class MedicationPrescriptionDispenseComponent extends BackboneElement {
      attribute ResourceReference medication (0..1);    // Identifies the medication that is to be dispensed.  This may be a more specifically defined than the medicationPrescription.medication . This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
      attribute Period validityPeriod (0..1);    // Design Comments: This indicates the validity period of a prescription (stale dating the Prescription)  It reflects the prescriber perspective for the validity of the prescription. Dispenses must not be made against the prescription outside of this period. The lower-bound of the Dispensing Window signifies the earliest date that the prescription can be filled for the first time. If an upper-bound is not specified then the Prescription is open-ended or will default to a stale-date based on regulations.  Rationale: Indicates when the Prescription becomes valid, and when it ceases to be a dispensable Prescription.
      attribute Integer numberOfRepeatsAllowed (0..1);    // An integer indicating the number of repeats of the Dispense.  UsageNotes: For example, the number of times the prescribed quantity is to be supplied including the initial standard fill.
      attribute Quantity quantity (0..1);    // The amount that is to be dispensed.
      attribute Duration expectedSupplyDuration (0..1);    // Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.  In some situations, this attribute may be used instead of quantity to identify the amount supplied by how long it is expected to last, rather than the physical quantity issued, e.g. 90 days supply of medication (based on an ordered dosage) When possible, it is always better to specify quantity, as this tends to be more precise. expectedSupplyDuration will always be an estimate that can be influenced by external factors.
    }

    class MedicationPrescriptionSubstitutionComponent extends BackboneElement {
      attribute CodeableConcept type (1..1);    // A code signifying whether a different drug should be dispensed from what was prescribed.
      attribute CodeableConcept reason (0..1);    // Indicates the reason for the substitution, or why substitution must or must not be performed.
    }

    attribute Identifier identifier (0..-1);    // External identifier - one that would be used by another non-FHIR system - for example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an erntire workflow process where records have to be tracked through an entire system.
    attribute DateTime dateWritten (0..1);    // The date (and perhaps time) when the prescription was written.
    attribute MedicationPrescriptionStatus status (0..1);    // A code specifying the state of the order.  Generally this will be active or completed state.
    attribute ResourceReference patient (0..1);    // A link to a resource representing the person to whom the medication will be given.
    attribute ResourceReference prescriber (0..1);    // The healthcare professional responsible for authorizing the prescription.
    attribute ResourceReference encounter (0..1);    // A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
    attribute Type reason (0..1);    // Can be the reason or the indication for writing the prescription.
    attribute ResourceReference medication (0..1);    // Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    attribute MedicationPrescriptionDosageInstructionComponent dosageInstruction (0..-1);    // Indicates how the medication is to be used by the patient.
    attribute MedicationPrescriptionDispenseComponent dispense (0..1);    // Deals with details of the dispense part of the order.
    attribute MedicationPrescriptionSubstitutionComponent substitution (0..1);    // Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
  }

  class MedicationStatement extends Resource {    // A record of medication being taken by a patient, or that the medication has been given to a patient where the record is the result of a report from the patient or another clinician.
    class MedicationStatementDosageComponent extends BackboneElement {
      attribute Schedule timing (0..1);    // The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions, for example.  "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
      attribute Type asNeeded (0..1);    // If set to true or if specified as a CodeableConcept, indicates that the medication is only taken when needed within the specified schedule rather than at every scheduled dose.  If a CodeableConcept is present, it indicates the pre-condition for taking the Medication.
      attribute CodeableConcept site (0..1);    // A coded specification of the anatomic site where the medication first enters the body.
      attribute CodeableConcept route (0..1);    // A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
      attribute CodeableConcept method (0..1);    // A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  Examples:  Slow Push; Deep IV.  Terminologies used often pre-coordinate this term with the route and or form of administration.
      attribute Quantity quantity (0..1);    // The amount of therapeutic or other substance given at one administration event.
      attribute Ratio rate (0..1);    // Identifies the speed with which the substance is introduced into the subject. Typically the rate for an infusion. 200ml in 2 hours.
      attribute Ratio maxDosePerPeriod (0..1);    // The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time. E.g. 1000mg in 24 hours.
    }

    attribute Identifier identifier (0..-1);    // External identifier - FHIR will generate its own internal IDs (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
    attribute ResourceReference patient (0..1);    // The person or animal who is /was taking the medication.
    attribute Boolean wasNotGiven (0..1);    // Set this to true if the record is saying that the medication was NOT taken.
    attribute CodeableConcept reasonNotGiven (0..-1);    // A code indicating why the medication was not taken.
    attribute Period whenGiven (0..1);    // The interval of time during which it is being asserted that the patient was taking the medication.
    attribute ResourceReference medication (0..1);    // Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    attribute ResourceReference device (0..-1);    // An identifier or a link to a resource that identifies a device used in administering the medication to the patient.
    attribute MedicationStatementDosageComponent dosage (0..-1);    // Indicates how the medication is/was used by the patient.
  }

  class MessageHeader extends Resource {    // The header for a message exchange that is either requesting or responding to an action.  The resource(s) that are the subject of the action as well as other Information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
    enum ResponseCode {    // The kind of response to a message
      0 : Null = "Missing in instance";
      1 : ok = "The message was accepted and processed without error.";
      2 : transienterror = "Some internal unexpected error occurred - wait and try again. Note - this is usually used for things like database unavailable, which may be expected to resolve, though human intervention may be required.";
      3 : fatalerror = "The message was rejected because of some content in it. There is no point in re-sending without change. The response narrative SHALL describe what the issue is.";
    }

    class MessageHeaderResponseComponent extends BackboneElement {
      attribute Id identifier (1..1);    // The id of the message that this message is a response to.
      attribute ResponseCode code (1..1);    // Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
      attribute ResourceReference details (0..1);    // Full details of any issues found in the message.
    }

    class MessageSourceComponent extends BackboneElement {
      attribute String name (0..1);    // Human-readable name for the target system.
      attribute String software (1..1);    // May include configuration or other information useful in debugging.
      attribute String version (0..1);    // Can convey versions of multiple systems in situations where a message passes through multiple hands.
      attribute Contact contact (0..1);    // An e-mail, phone, website or other contact point to use to resolve issues with message communications.
      attribute Uri endpoint (1..1);    // Identifies the routing target to send acknowledgements to.
    }

    class MessageDestinationComponent extends BackboneElement {
      attribute String name (0..1);    // Human-readable name for the source system.
      attribute ResourceReference target (0..1);    // Identifies the target end system in situations where the initial message transmission is to an intermediary system.
      attribute Uri endpoint (1..1);    // Indicates where the message should be routed to.
    }

    attribute Id identifier (1..1);    // The identifier of this message.
    attribute Instant timestamp (1..1);    // The time that the message was sent.
    attribute Coding event (1..1);    // Code that identifies the event this message represents and connects it with it's definition. Events defined as part of the FHIR specification have the system value "http://hl7.org/fhir/message-type".
    attribute MessageHeaderResponseComponent response (0..1);    // Information about the message that this message is a response to.  Only present if this message is a response.
    attribute MessageSourceComponent source (1..1);    // The source application from which this message originated.
    attribute MessageDestinationComponent destination (0..-1);    // The destination application which the message is intended for.
    attribute ResourceReference enterer (0..1);    // The person or device that performed the data entry leading to this message. Where there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
    attribute ResourceReference author (0..1);    // The logical author of the message - the person or device that decided the described event should happen. Where there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
    attribute ResourceReference receiver (0..1);    // Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
    attribute ResourceReference responsible (0..1);    // The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
    attribute CodeableConcept reason (0..1);    // Coded indication of the cause for the event - indicates  a reason for the occurance of the event that is a focus of this message.
    attribute ResourceReference data (0..-1);    // The actual data of the message - a reference to the root/focus class of the event.
  }

  class Namespace extends Resource {    // A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
    enum NamespaceType {    // Identifies the purpose of the namespace
      0 : Null = "Missing in instance";
      1 : codesystem = "The namespace is used to define concepts and symbols to represent those concepts.  E.g. UCUM, LOINC, NDC code, local lab codes, etc.";
      2 : identifier = "The namespace is used to manage identifiers (e.g. license numbers, order numbers, etc.).";
      3 : root = "The namespace is used as the root for other identifiers and namespaces.";
    }

    enum NamespaceStatus {    // Indicates whether the namespace should be used
      0 : Null = "Missing in instance";
      1 : proposed = "System has been submitted but not yet approved.";
      2 : active = "System is valid for use.";
      3 : retired = "System should no longer be used.";
    }

    enum NamespaceIdentifierType {    // Identifies the style of unique identifier used to identify a namepace
      0 : Null = "Missing in instance";
      1 : oid = "An ISO object identifier.  E.g. 1.2.3.4.5.";
      2 : uuid = "A universally unique identifier of the form a5afddf4-e880-459b-876e-e4591b0acc11.";
      3 : uri = "A uniform resource identifier (ideally a URL - uniform resource locator).  E.g. http://unitsofmeasure.org.";
      4 : other = "Some other type of unique identifier.  E.g HL7-assigned reserved string such as LN for LOINC.";
    }

    class NamespaceUniqueIdComponent extends BackboneElement {
      attribute NamespaceIdentifierType type (1..1);    // Identifies the unique identifier scheme used for this particular identifier.
      attribute String value (1..1);    // The string that should be sent over the wire to identify the code system or identifier system.
      attribute Boolean preferred (0..1);    // Indicates whether this identifier is the "preferred" identifier of this type.
      attribute Period period (0..1);    // Identifies the period of time over which this identifier is considered appropriate to refer to the namespace.  Outside of this window, the identifier might be non-deterministic.
    }

    class NamespaceContactComponent extends BackboneElement {
      attribute HumanName name (0..1);    // Names of the person who can be contacted.
      attribute Contact telecom (0..-1);    // Identifies the mechanism(s) by which they can be contacted.
    }

    attribute NamespaceType type (1..1);    // Indicates the purpose for the namespace - what kinds of things does it make unique?.
    attribute String name (1..1);    // The descriptive name of this particular identifier type or code system.
    attribute NamespaceStatus status (1..1);    // Indicates whether the namespace is "ready for use" or not.
    attribute Code country (0..1);    // If present, indicates that the identifier or code system is principally intended for use or applies to entities within the specified country.  For example, the country associated with a national code system.
    attribute CodeableConcept category (0..1);    // Categorizes a namespace for easier search by grouping related namespaces.
    attribute String responsible (0..1);    // The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
    attribute String description (0..1);    // Details about what the namespace identifies including scope, granularity, version labeling, etc.
    attribute String usage (0..1);    // Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
    attribute NamespaceUniqueIdComponent uniqueId (1..-1);    // Indicates how the system may be identified when referenced in electronic exchange.
    attribute NamespaceContactComponent contact (0..1);    // The person who can be contacted about this system registration entry.
    attribute ResourceReference replacedBy (0..1);    // For namespaces that are retired, indicates the namespace that should be used in their place (if any).
  }

  class Observation extends Resource {    // Measurements and simple assertions made about a patient, device or other subject.
    enum ObservationStatus {    // Codes providing the status of an observation
      0 : Null = "Missing in instance";
      1 : registered = "The existence of the observation is registered, but there is no result yet available.";
      2 : preliminary = "This is an initial or interim observation: data may be incomplete or unverified.";
      3 : final_ = "The observation is complete and verified by an authorized person.";
      4 : amended = "The observation has been modified subsequent to being Final, and is complete and verified by an authorized person.";
      5 : cancelled = "The observation is unavailable because the measurement was not started or not completed (also sometimes called "aborted").";
      6 : enteredInError = "The observation has been withdrawn following previous Final release.";
    }

    enum ObservationReliability {    // Codes that provide an estimate of the degree to which quality issues have impacted on the value of an observation
      0 : Null = "Missing in instance";
      1 : ok = "The result has no reliability concerns.";
      2 : ongoing = "An early estimate of value; measurement is still occurring.";
      3 : early = "An early estimate of value; processing is still occurring.";
      4 : questionable = "The observation value should be treated with care.";
      5 : calibrating = "The result has been generated while calibration is occurring.";
      6 : error = "The observation could not be completed because of an error.";
      7 : unknown = "No observation value was available.";
    }

    enum ObservationRelationshiptypes {    // Codes specifying how two observations are related
      0 : Null = "Missing in instance";
      1 : hascomponent = "The target observation is a component of this observation (e.g. Systolic and Diastolic Blood Pressure).";
      2 : hasmember = "This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.";
      3 : derivedfrom = "The target observation is part of the information from which this observation value is derived (e.g. calculated anion gap, Apgar score).";
      4 : sequelto = "This observation follows the target observation (e.g. timed tests such as Glucose Tolerance Test).";
      5 : replaces = "This observation replaces a previous observation (i.e. a revised value). The target observation is now obsolete.";
      6 : qualifiedby = "The value of the target observation qualifies (refines) the semantics of the source observation (e.g. a lipaemia measure target from a plasma measure).";
      7 : interferedby = "The value of the target observation interferes (degardes quality, or prevents valid observation) with the semantics of the source observation (e.g. a hemolysis measure target from a plasma potassium measure which has no value).";
    }

    class ObservationReferenceRangeComponent extends BackboneElement {
      attribute Quantity low (0..1);    // The value of the low bound of the reference range. If this is omitted, the low bound of the reference range is assumed to be meaningless. E.g. <2.3.
      attribute Quantity high (0..1);    // The value of the high bound of the reference range. If this is omitted, the high bound of the reference range is assumed to be meaningless. E.g. >5.
      attribute CodeableConcept meaning (0..1);    // Code for the meaning of the reference range.
      attribute Range age (0..1);    // The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
      attribute String text (0..1);    // Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of 'normals'.
    }

    class ObservationRelatedComponent extends BackboneElement {
      attribute ObservationRelationshiptypes type (0..1);    // A code specifying the kind of relationship that exists with the target observation.
      attribute ResourceReference target (1..1);    // A reference to the observation that is related to this observation.
    }

    attribute CodeableConcept name (1..1);    // Describes what was observed. Sometimes this is called the observation "code".
    attribute Type value (0..1);    // The information determined as a result of making the observation, if the information has a simple value.
    attribute CodeableConcept interpretation (0..1);    // The assessment made based on the result of the observation.
    attribute String comments (0..1);    // May include statements about significant, unexpected or unreliable values, or information about the source of the value where this may be relevant to the interpretation of the result.
    attribute Type applies (0..1);    // The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
    attribute Instant issued (0..1);    // Date/Time this was made available.
    attribute ObservationStatus status (1..1);    // The status of the result value.
    attribute ObservationReliability reliability (1..1);    // An estimate of the degree to which quality issues have impacted on the value reported.
    attribute CodeableConcept bodySite (0..1);    // Indicates where on the subject's body the observation was made.
    attribute CodeableConcept method (0..1);    // Indicates the mechanism used to perform the observation.
    attribute Identifier identifier (0..1);    // A unique identifier for the simple observation.
    attribute ResourceReference subject (0..1);    // The thing the observation is being made about.
    attribute ResourceReference specimen (0..1);    // The specimen that was used when this observation was made.
    attribute ResourceReference performer (0..-1);    // Who was responsible for asserting the observed value as "true".
    attribute ResourceReference encounter (0..1);    // The healthcare event  ( e.g. a patient and healthcare provider interaction ) that relates to this observation.
    attribute ObservationReferenceRangeComponent referenceRange (0..-1);    // Guidance on how to interpret the value by comparison to a normal or recommended range.
    attribute ObservationRelatedComponent related (0..-1);    // Related observations - either components, or previous observations, or statements of derivation.
  }

  class OperationDefinition extends Resource {    // A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
    enum ResourceProfileStatus {    // The lifecycle status of a Resource Profile
      0 : Null = "Missing in instance";
      1 : draft = "This profile is still under development.";
      2 : active = "This profile is ready for normal use.";
      3 : retired = "This profile has been deprecated, withdrawn or superseded and should no longer be used.";
    }

    enum OperationKind {    // Whether an operation is a normal operation or a query
      0 : Null = "Missing in instance";
      1 : operation = "This operation is invoked as an operation.";
      2 : query = "This operation is a named query, invoked using the search mechanism.";
    }

    enum OperationParameterUse {    // Whether an operation parameter is an input or an output parameter
      0 : Null = "Missing in instance";
      1 : in = "This is an input parameter.";
      2 : out = "This is an output parameter.";
    }

    class OperationDefinitionParameterComponent extends BackboneElement {
      attribute Code name (1..1);    // The name of used to identify the parameter.
      attribute OperationParameterUse use (1..1);    // Whether this is an input or an output parameter.
      attribute Integer min (1..1);    // The minimum number of times this parameter SHALL appear in the request or response.
      attribute String max (1..1);    // The maximum number of times this element is permitted to appear in the request or response.
      attribute String documentation (0..1);    // Describes the meaning or use of this parameter.
      attribute Coding type (1..1);    // The type for this parameter.
      attribute ResourceReference profile (0..1);    // A profile the specifies the rules that this parameter must conform to.
    }

    attribute Uri identifier (0..1);    // The identifier that is used to identify this operation definition when it is referenced in a specification, model, design or an instance (should be globally unique OID, UUID, or URI).
    attribute String version (0..1);    // The identifier that is used to identify this version of the profile when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    attribute String title (1..1);    // A free text natural language name identifying the Profile.
    attribute String publisher (0..1);    // Details of the individual or organization who accepts responsibility for publishing the profile.
    attribute Contact telecom (0..-1);    // Contact details to assist a user in finding and communicating with the publisher.
    attribute String description (0..1);    // A free text natural language description of the profile and its use.
    attribute Coding code (0..-1);    // A set of terms from external terminologies that may be used to assist with indexing and searching of templates.
    attribute ResourceProfileStatus status (1..1);    // The status of the profile.
    attribute Boolean experimental (0..1);    // This profile was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    attribute DateTime date (0..1);    // The date that this version of the profile was published.
    attribute OperationKind kind (1..1);    // Whether this is operation or named query.
    attribute Code name (1..1);    // The name used to invoke the operation.
    attribute String notes (0..1);    // Additional information about how to use this operation or named query.
    attribute ResourceReference base (0..1);    // Indicates that this operation definition is a constraining profile on the base.
    attribute Boolean system (1..1);    // Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
    attribute Code type (0..-1);    // Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a resource type for the context).
    attribute Boolean instance (1..1);    // Indicates whether this operation can be invoked on a particular instance of one of the given types.
    attribute OperationDefinitionParameterComponent parameter (0..-1);    // Parameters for the operation/query.
  }

  class OperationOutcome extends Resource {    // A collection of error, warning or information messages that result from a system action.
    enum IssueSeverity {    // How the issue affects the success of the action
      0 : Null = "Missing in instance";
      1 : fatal = "The issue caused the action to fail, and no further checking could be performed.";
      2 : error = "The issue is sufficiently important to cause the action to fail.";
      3 : warning = "The issue is not important enough to cause the action to fail, but may cause it to be performed suboptimally or in a way that is not as desired.";
      4 : information = "The issue has no relation to the degree of success of the action.";
    }

    class OperationOutcomeIssueComponent extends BackboneElement {
      attribute IssueSeverity severity (1..1);    // Indicates whether the issue indicates a variation from successful processing.
      attribute Coding type (0..1);    // A code indicating the type of error, warning or information message.
      attribute String details (0..1);    // Additional description of the issue.
      attribute String location (0..-1);    // A simple XPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.
    }

    attribute OperationOutcomeIssueComponent issue (1..-1);    // An error, warning or information message that results from a system action.
  }

  class Order extends Resource {    // A request to perform an action.
    class OrderWhenComponent extends BackboneElement {
      attribute CodeableConcept code (0..1);    // Code specifies when request should be done. The code may simply be a priority code.
      attribute Schedule schedule (0..1);    // A formal schedule.
    }

    attribute Identifier identifier (0..-1);    // Identifiers assigned to this order by the orderer or by the receiver.
    attribute DateTime date (0..1);    // When the order was made.
    attribute ResourceReference subject (0..1);    // Patient this order is about.
    attribute ResourceReference source (0..1);    // Who initiated the order.
    attribute ResourceReference target (0..1);    // Who is intended to fulfill the order.
    attribute Type reason (0..1);    // Text - why the order was made.
    attribute ResourceReference authority (0..1);    // If required by policy.
    attribute OrderWhenComponent when (0..1);    // When order should be fulfilled.
    attribute ResourceReference detail (1..-1);    // What action is being ordered.
  }

  class OrderResponse extends Resource {    // A response to an order.
    enum OrderOutcomeCode {    // The status of the response to an order
      0 : Null = "Missing in instance";
      1 : pending = "The order is known, but no processing has occurred at this time.";
      2 : review = "The order is undergoing initial processing to determine whether it will be accepted (usually this involves human review).";
      3 : rejected = "The order was rejected because of a workflow/business logic reason.";
      4 : error = "The order was unable to be processed because of a technical error (i.e. unexpected error).";
      5 : accepted = "The order has been accepted, and work is in progress.";
      6 : cancelled = "Processing the order was halted at the initiators request.";
      7 : replaced = "The order has been cancelled and replaced by another.";
      8 : aborted = "Processing the order was stopped because of some workflow/business logic reason.";
      9 : complete = "The order has been completed.";
    }

    attribute Identifier identifier (0..-1);    // Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.
    attribute ResourceReference request (1..1);    // A reference to the order that this is in response to.
    attribute DateTime date (0..1);    // The date and time at which this order response was made (created/posted).
    attribute ResourceReference who (0..1);    // The person, organization, or device credited with making the response.
    attribute Type authority (0..1);    // A reference to an authority policy that is the reason for the response. Usually this is used when the order is rejected, to provide a reason for rejection.
    attribute OrderOutcomeCode code (1..1);    // What this response says about the status of the original order.
    attribute String description (0..1);    // Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.
    attribute ResourceReference fulfillment (0..-1);    // Links to resources that provide details of the outcome of performing the order. E.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.
  }

  class Organization extends Resource {    // A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.
    class OrganizationContactComponent extends BackboneElement {
      attribute CodeableConcept purpose (0..1);    // Indicates a purpose for which the contact can be reached.
      attribute HumanName name (0..1);    // A name associated with the contact.
      attribute Contact telecom (0..-1);    // A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
      attribute Address address (0..1);    // Visiting or postal addresses for the contact.
      attribute CodeableConcept gender (0..1);    // Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
    }

    attribute Identifier identifier (0..-1);    // Identifier for the organization that is used to identify the organization across multiple disparate systems.
    attribute String name (0..1);    // A name associated with the organization.
    attribute CodeableConcept type (0..1);    // The kind of organization that this is.
    attribute Contact telecom (0..-1);    // A contact detail for the organization.
    attribute Address address (0..-1);    // An address for the organization.
    attribute ResourceReference partOf (0..1);    // The organization of which this organization forms a part.
    attribute OrganizationContactComponent contact (0..-1);    // Contact for the organization for a certain purpose.
    attribute ResourceReference location (0..-1);    // Location(s) the organization uses to provide services.
    attribute Boolean active (0..1);    // Whether the organization's record is still in active use.
  }

  class Other extends Resource {    // Other is a conformant for handling resource concepts not yet defined for FHIR or outside HL7's scope of interest.
    attribute Identifier identifier (0..-1);    // Identifier assigned to the resource for business purposes, outside the context of FHIR.
    attribute CodeableConcept code (1..1);    // Identifies the 'type' of resource - equivalent to the resource name for other resources.
    attribute ResourceReference subject (0..1);    // Identifies the patient, practitioner, device or any other resource that is the "focus" of this resoruce.
    attribute ResourceReference author (0..1);    // Indicates who was responsible for creating the resource instance.
    attribute Date created (0..1);    // Identifies when the resource was first created.
  }

  class Patient extends Resource {    // Demographics and other administrative information about a person or animal receiving care or other health-related services.
    enum LinkType {    // The type of link between this patient resource and another patient resource.
      0 : Null = "Missing in instance";
      1 : replace = "The patient resource containing this link must no longer be used. The link points forward to another patient resource that must be used in lieu of the patient resource that contains the link.";
      2 : refer = "The patient resource containing this link is in use and valid but not considered the main source of information about a patient. The link points forward to another patient resource that should be consulted to retrieve additional patient information.";
      3 : seealso = "The patient resource containing this link is in use and valid, but points to another patient resource that is known to contain data about the same person. Data in this resource might overlap or contradict information found in the other patient resource. This link does not indicate any relative importance of the resources concerned, and both should be regarded as equally valid.";
    }

    class ContactComponent extends BackboneElement {
      attribute CodeableConcept relationship (0..-1);    // The nature of the relationship between the patient and the contact person.
      attribute HumanName name (0..1);    // A name associated with the person.
      attribute Contact telecom (0..-1);    // A contact detail for the person, e.g. a telephone number or an email address.
      attribute Address address (0..1);    // Address for the contact person.
      attribute CodeableConcept gender (0..1);    // Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
      attribute ResourceReference organization (0..1);    // Organization on behalf of which the contact is acting or for which the contact is working.
    }

    class AnimalComponent extends BackboneElement {
      attribute CodeableConcept species (1..1);    // Identifies the high level categorization of the kind of animal.
      attribute CodeableConcept breed (0..1);    // Identifies the detailed categorization of the kind of animal.
      attribute CodeableConcept genderStatus (0..1);    // Indicates the current state of the animal's reproductive organs.
    }

    class PatientLinkComponent extends BackboneElement {
      attribute ResourceReference other (1..1);    // The other patient resource that the link refers to.
      attribute LinkType type (1..1);    // The type of link between this patient resource and another patient resource.
    }

    attribute Identifier identifier (0..-1);    // An identifier that applies to this person as a patient.
    attribute HumanName name (0..-1);    // A name associated with the individual.
    attribute Contact telecom (0..-1);    // A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
    attribute CodeableConcept gender (0..1);    // Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
    attribute DateTime birthDate (0..1);    // The date and time of birth for the individual.
    attribute Type deceased (0..1);    // Indicates if the individual is deceased or not.
    attribute Address address (0..-1);    // Addresses for the individual.
    attribute CodeableConcept maritalStatus (0..1);    // This field contains a patient's most recent marital (civil) status.
    attribute Type multipleBirth (0..1);    // Indicates whether the patient is part of a multiple or indicates the actual birth order.
    attribute Attachment photo (0..-1);    // Image of the person.
    attribute ContactComponent contact (0..-1);    // A contact party (e.g. guardian, partner, friend) for the patient.
    attribute AnimalComponent animal (0..1);    // This element has a value if the patient is an animal.
    attribute CodeableConcept communication (0..-1);    // Languages which may be used to communicate with the patient about his or her health.
    attribute ResourceReference careProvider (0..-1);    // Patient's nominated care provider.
    attribute ResourceReference managingOrganization (0..1);    // Organization that is the custodian of the patient record.
    attribute PatientLinkComponent link (0..-1);    // Link to another patient resource that concerns the same actual person.
    attribute Boolean active (0..1);    // Whether this patient record is in active use.
  }

  class Practitioner extends Resource {    // A person who is directly or indirectly involved in the provisioning of healthcare.
    class PractitionerQualificationComponent extends BackboneElement {
      attribute Identifier identifier (0..-1);    // An identifier that applies to this person's qualification in this role.
      attribute CodeableConcept code (1..1);    // Coded representation of the qualification.
      attribute Period period (0..1);    // Period during which the qualification is valid.
      attribute ResourceReference issuer (0..1);    // Organization that regulates and issues the qualification.
    }

    attribute Identifier identifier (0..-1);    // An identifier that applies to this person in this role.
    attribute HumanName name (0..1);    // A name associated with the person.
    attribute Contact telecom (0..-1);    // A contact detail for the practitioner, e.g. a telephone number or an email address.
    attribute Address address (0..-1);    // The postal address where the practitioner can be found or visited or to which mail can be delivered.
    attribute CodeableConcept gender (0..1);    // Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
    attribute DateTime birthDate (0..1);    // The date and time of birth for the practitioner.
    attribute Attachment photo (0..-1);    // Image of the person.
    attribute ResourceReference organization (0..1);    // The organization that the practitioner represents.
    attribute CodeableConcept role (0..-1);    // Roles which this practitioner is authorized to perform for the organization.
    attribute CodeableConcept specialty (0..-1);    // Specific specialty of the practitioner.
    attribute Period period (0..1);    // The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
    attribute ResourceReference location (0..-1);    // The location(s) at which this practitioner provides care.
    attribute PractitionerQualificationComponent qualification (0..-1);    // Qualifications obtained by training and certification.
    attribute CodeableConcept communication (0..-1);    // A language the practitioner is able to use in patient communication.
  }

  class Procedure extends Resource {    // An action that is performed on a patient. This can be a physical 'thing' like an operation, or less invasive like counseling or hypnotherapy.
    enum ProcedureRelationshipType {    // The nature of the relationship with this procedure
      0 : Null = "Missing in instance";
      1 : causedby = "This procedure had to be performed because of the related one.";
      2 : becauseof = "This procedure caused the related one to be performed.";
    }

    class ProcedurePerformerComponent extends BackboneElement {
      attribute ResourceReference person (0..1);    // The practitioner who was involved in the procedure.
      attribute CodeableConcept role (0..1);    // E.g. surgeon, anaethetist, endoscopist.
    }

    class ProcedureRelatedItemComponent extends BackboneElement {
      attribute ProcedureRelationshipType type (0..1);    // The nature of the relationship.
      attribute ResourceReference target (0..1);    // The related item - e.g. a procedure.
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this procedure that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute ResourceReference subject (1..1);    // The person on whom the procedure was performed.
    attribute CodeableConcept type (1..1);    // The specific procedure that is performed. Use text if the exact nature of the procedure can't be coded.
    attribute CodeableConcept bodySite (0..-1);    // Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
    attribute CodeableConcept indication (0..-1);    // The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
    attribute ProcedurePerformerComponent performer (0..-1);    // Limited to 'real' people rather than equipment.
    attribute Period date (0..1);    // The dates over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
    attribute ResourceReference encounter (0..1);    // The encounter during which the procedure was performed.
    attribute String outcome (0..1);    // What was the outcome of the procedure - did it resolve reasons why the procedure was performed?.
    attribute ResourceReference report (0..-1);    // This could be a histology result. There could potentially be multiple reports - e.g. if this was a procedure that made multiple biopsies.
    attribute CodeableConcept complication (0..-1);    // Any complications that occurred during the procedure, or in the immediate post-operative period. These are generally tracked separately from the notes, which typically will describe the procedure itself rather than any 'post procedure' issues.
    attribute String followUp (0..1);    // If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or potentially could be more complex in which case the CarePlan resource can be used.
    attribute ProcedureRelatedItemComponent relatedItem (0..-1);    // Procedures may be related to other items such as procedures or medications. For example treating wound dehiscence following a previous procedure.
    attribute String notes (0..1);    // Any other notes about the procedure - e.g. the operative notes.
  }

  class Profile extends Resource {    // A Resource Profile - a statement of use of one or more FHIR Resources.  It may include constraints on Resources and Data Types, Terminology Binding Statements and Extension Definitions.
    enum ResourceProfileStatus {    // The lifecycle status of a Resource Profile
      0 : Null = "Missing in instance";
      1 : draft = "This profile is still under development.";
      2 : active = "This profile is ready for normal use.";
      3 : retired = "This profile has been deprecated, withdrawn or superseded and should no longer be used.";
    }

    enum PropertyRepresentation {    // How a property is represented on the wire
      0 : Null = "Missing in instance";
      1 : xmlAttr = "In XML, this property is represented as an attribute not an element.";
    }

    enum ResourceSlicingRules {    // How slices are interpreted when evaluating an instance
      0 : Null = "Missing in instance";
      1 : closed = "No additional content is allowed other than that described by the slices in this profile.";
      2 : open = "Additional content is allowed anywhere in the list.";
      3 : openAtEnd = "Additional content is allowed, but only at the end of the list.";
    }

    enum ResourceAggregationMode {    // How resource references can be aggregated
      0 : Null = "Missing in instance";
      1 : contained = "The reference is a local reference to a contained resource.";
      2 : referenced = "The reference to to a resource that has to be resolved externally to the resource that includes the reference.";
      3 : bundled = "The resource the reference points to will be found in the same bundle as the resource that includes the reference.";
    }

    enum ConstraintSeverity {    // SHALL applications comply with this constraint?
      0 : Null = "Missing in instance";
      1 : error = "If the constraint is violated, the resource is not conformant.";
      2 : warning = "If the constraint is violated, the resource is conformant, but it is not necessarily following best practice.";
    }

    enum BindingConformance {    // Binding conformance for applications
      0 : Null = "Missing in instance";
      1 : required = "Only codes in the specified set are allowed.  If the binding is extensible, other codes may be used for concepts not covered by the bound set of codes.";
      2 : preferred = "For greater interoperability, implementers are strongly encouraged to use the bound set of codes, however alternate codes may be used in derived profiles and implementations if necessary without being considered non-conformant.";
      3 : example = "The codes in the set are an example to illustrate the meaning of the field. There is no particular preference for its use nor any assertion that the provided values are sufficient to meet implementation needs.";
    }

    enum SearchParamType {    // Data types allowed to be used for search parameters
      0 : Null = "Missing in instance";
      1 : number = "Search parameter SHALL be a number (a whole number, or a decimal).";
      2 : date = "Search parameter is on a date/time. The date format is the standard XML format, though other formats may be supported.";
      3 : string = "Search parameter is a simple string, like a name part. Search is case-insensitive and accent-insensitive. May match just the start of a string. String parameters may contain spaces.";
      4 : token = "Search parameter on a coded element or identifier. May be used to search through the text, displayname, code and code/codesystem (for codes) and label, system and key (for identifier). Its value is either a string or a pair of namespace and value, separated by a "|", depending on the modifier used.";
      5 : reference = "A reference to another resource.";
      6 : composite = "A composite search parameter that combines a search on two values together.";
      7 : quantity = "A search parameter that searches on a quantity.";
    }

    enum ExtensionContext {    // How an extension context is interpreted
      0 : Null = "Missing in instance";
      1 : resource = "The context is all elements matching a particular resource element path.";
      2 : datatype = "The context is all nodes matching a particular data type element path (root or repeating element) or all elements referencing a particular primitive data type (expressed as the datatype name).";
      3 : mapping = "The context is all nodes whose mapping to a specified reference model corresponds to a particular mapping structure.  The context identifies the mapping target. The mapping should clearly identify where such an extension could be used.";
      4 : extension = "The context is a particular extension from a particular profile.  Expressed as uri#name, where uri identifies the profile and #name identifies the extension code.";
    }

    class ProfileMappingComponent extends BackboneElement {
      attribute Id identity (1..1);    // An Internal id that is used to identify this mapping set when specific mappings are made.
      attribute Uri uri (0..1);    // A URI that identifies the specification that this mapping is expressed to.
      attribute String name (0..1);    // A name for the specification that is being mapped to.
      attribute String comments (0..1);    // Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
    }

    class ProfileStructureComponent extends BackboneElement {
      attribute Code type (1..1);    // The Resource or Data type being described.
      attribute Uri base (0..1);    // The structure that is the base on which this set of constraints is derived from.
      attribute String name (0..1);    // The name of this resource constraint statement (to refer to it from other resource constraints - from Profile.structure.snapshot.element.definition.type.profile).
      attribute Boolean publish (0..1);    // This definition of a profile on a structure is published as a formal statement. Some structural definitions might be defined purely for internal use within the profile, and not intended to be used outside that context.
      attribute String purpose (0..1);    // Human summary: why describe this resource?.
      attribute ConstraintComponent snapshot (0..1);    // A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base profile.
      attribute ConstraintComponent differential (0..1);    // A differential view is expressed relative to the base profile - a statement of differences that it applies.
      attribute ProfileStructureSearchParamComponent searchParam (0..-1);    // Additional search parameters for implementations to support and/or make use of.
    }

    class ConstraintComponent extends BackboneElement {
      attribute ElementComponent element (0..-1);    // Captures constraints on each element within the resource.
    }

    class ElementComponent extends BackboneElement {
      attribute String path (1..1);    // The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource.
      attribute PropertyRepresentation representation (0..-1);    // Codes that define how this element is represented in instances, when the deviation varies from the normal case.
      attribute String name (0..1);    // The name of this element definition (to refer to it from other element definitions using Profile.structure.snapshot.element.definition.nameReference). This is a unique name referring to a specific set of constraints applied to this element. One use of this is to provide a name to different slices of the same element.
      attribute ElementSlicingComponent slicing (0..1);    // Indicates that the element is sliced into a set of alternative definitions (there are multiple definitions on a single element in the base resource). The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
      attribute ElementDefinitionComponent definition (0..1);    // Definition of the content of the element to provide a more specific definition than that contained for the element in the base resource.
    }

    class ElementSlicingComponent extends BackboneElement {
      attribute Id discriminator (0..1);    // Designates which child element is used to discriminate between the slices when processing an instance. The value of the child element in the instance SHALL completely distinguish which slice the element in the resource matches based on the allowed values for that element in each of the slices.
      attribute Boolean ordered (0..1);    // If the matching elements have to occur in the same order as defined in the profile.
      attribute ResourceSlicingRules rules (1..1);    // Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
    }

    class ElementDefinitionComponent extends BackboneElement {
      attribute String short_ (0..1);    // A concise definition that  is shown in the generated XML format that summarizes profiles (used throughout the specification).
      attribute String formal (0..1);    // The definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.
      attribute String comments (0..1);    // Comments about the use of the element, including notes about how to use the data properly, exceptions to proper use, etc.
      attribute String requirements (0..1);    // Explains why this element is needed and why it's been constrained as it has.
      attribute String synonym (0..-1);    // Identifies additional names by which this element might also be known.
      attribute Integer min (0..1);    // The minimum number of times this element SHALL appear in the instance.
      attribute String max (0..1);    // The maximum number of times this element is permitted to appear in the instance.
      attribute TypeRefComponent type (0..-1);    // The data type or resource that the value of this element is permitted to be.
      attribute String nameReference (0..1);    // Identifies the name of a slice defined elsewhere in the profile whose constraints should be applied to the current element.
      attribute Type value (0..1);    // Specifies a primitive value that SHALL hold for this element in the instance.
      attribute Type example (0..1);    // An example value for this element.
      attribute Integer maxLength (0..1);    // Indicates the shortest length that SHALL be supported by conformant instances without truncation.
      attribute Id condition (0..-1);    // A reference to an invariant that may make additional statements about the cardinality or value in the instance.
      attribute ElementDefinitionConstraintComponent constraint (0..-1);    // Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
      attribute Boolean mustSupport (0..1);    // If true, conformant resource authors SHALL be capable of providing a value for the element and resource consumers SHALL be capable of extracting and doing something useful with the data element.  If false, the element may be ignored and not supported.
      attribute Boolean isModifier (0..1);    // If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
      attribute ElementDefinitionBindingComponent binding (0..1);    // Binds to a value set if this element is coded (code, Coding, CodeableConcept).
      attribute ElementDefinitionMappingComponent mapping (0..-1);    // Identifies a concept from an external specification that roughly corresponds to this element.
    }

    class TypeRefComponent extends BackboneElement {
      attribute Code code (1..1);    // Name of Data type or Resource.
      attribute Uri profile (0..1);    // Identifies a profile that SHALL hold for resources or datatypes referenced as the type of this element. Can be a local reference - to another structure in this profile, or a reference to a structure in another profile.
      attribute ResourceAggregationMode aggregation (0..-1);    // If the type is a reference to another resource, how the resource is or can be aggreated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
    }

    class ElementDefinitionConstraintComponent extends BackboneElement {
      attribute Id key (1..1);    // Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
      attribute String name (0..1);    // Used to label the constraint in OCL or in short displays incapable of displaying the full human description.
      attribute ConstraintSeverity severity (1..1);    // Identifies the impact constraint violation has on the conformance of the instance.
      attribute String human (1..1);    // Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
      attribute String xpath (1..1);    // XPath expression of constraint.
    }

    class ElementDefinitionBindingComponent extends BackboneElement {
      attribute String name (1..1);    // A descriptive name for this - can be useful for generating implementation artifacts.
      attribute Boolean isExtensible (1..1);    // If true, then conformant systems may use additional codes or (where the data type permits) text alone to convey concepts not covered by the set of codes identified in the binding.  If false, then conformant systems are constrained to the provided codes alone.
      attribute BindingConformance conformance (0..1);    // Indicates the degree of conformance expectations associated with this binding.
      attribute String description (0..1);    // Describes the intended use of this particular set of codes.
      attribute Type reference (0..1);    // Points to the value set or external definition that identifies the set of codes to be used.
    }

    class ElementDefinitionMappingComponent extends BackboneElement {
      attribute Id identity (1..1);    // An internal reference to the definition of a mapping.
      attribute String map (1..1);    // Expresses what part of the target specification corresponds to this element.
    }

    class ProfileStructureSearchParamComponent extends BackboneElement {
      attribute String name (1..1);    // The name of the standard or custom search parameter.
      attribute SearchParamType type (1..1);    // The type of value a search parameter refers to, and how the content is interpreted.
      attribute String documentation (1..1);    // A specification for search parameters. For standard parameters, provides additional information on how the parameter is used in this solution.  For custom parameters, provides a description of what the parameter does.
      attribute String xpath (0..1);    // An XPath expression that returns a set of elements for the search parameter.
      attribute Code target (0..-1);    // Types of resource (if a resource is referenced).
    }

    class ProfileExtensionDefnComponent extends BackboneElement {
      attribute Code code (1..1);    // A unique code (within the profile) used to identify the extension.
      attribute String display (0..1);    // Defined so that applications can use this name when displaying the value of the extension to the user.
      attribute ExtensionContext contextType (1..1);    // Identifies the type of context to which the extension applies.
      attribute String context (1..-1);    // Identifies the types of resource or data type elements to which the extension can be applied.
      attribute ElementComponent element (1..-1);    // Definition of the extension and its content.
    }

    attribute Uri url (1..1);    // The URL at which this profile is (or will be) published, and which is used to reference this profile in extension urls and tag values in operational FHIR systems.
    attribute Identifier identifier (0..-1);    // Formal identifier that is used to identify this profile when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI).
    attribute String version (0..1);    // The identifier that is used to identify this version of the profile when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    attribute String name (1..1);    // A free text natural language name identifying the Profile.
    attribute String publisher (0..1);    // Details of the individual or organization who accepts responsibility for publishing the profile.
    attribute Contact telecom (0..-1);    // Contact details to assist a user in finding and communicating with the publisher.
    attribute String description (0..1);    // A free text natural language description of the profile and its use.
    attribute Coding code (0..-1);    // A set of terms from external terminologies that may be used to assist with indexing and searching of templates.
    attribute ResourceProfileStatus status (1..1);    // The status of the profile.
    attribute Boolean experimental (0..1);    // This profile was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    attribute DateTime date (0..1);    // The date that this version of the profile was published.
    attribute String requirements (0..1);    // The Scope and Usage that this profile was created to meet.
    attribute Id fhirVersion (0..1);    // The version of the FHIR specification on which this profile is based.
    attribute ProfileMappingComponent mapping (0..-1);    // An external specification that the content is mapped to.
    attribute ProfileStructureComponent structure (0..-1);    // A constraint statement about what contents a resource or data type may have.
    attribute ProfileExtensionDefnComponent extensionDefn (0..-1);    // An extension defined as part of the profile.
  }

  class Provenance extends Resource {    // Provenance information that describes the activity that led to the creation of a set of resources. This information can be used to help determine their reliability or trace where the information in them came from. The focus of the provenance resource is record keeping, audit and traceability, and not explicit statements of clinical significance.
    enum ProvenanceEntityRole {    // How an entity was used in an activity
      0 : Null = "Missing in instance";
      1 : derivation = "A transformation of an entity into another, an update of an entity resulting in a new one, or the construction of a new entity based on a preexisting entity.";
      2 : revision = "A derivation for which the resulting entity is a revised version of some original.";
      3 : quotation = "The repeat of (some or all of) an entity, such as text or image, by someone who may or may not be its original author.";
      4 : source = "A primary source for a topic refers to something produced by some agent with direct experience and knowledge about the topic, at the time of the topic's study, without benefit from hindsight.";
    }

    class ProvenanceAgentComponent extends BackboneElement {
      attribute Coding role (1..1);    // The role that the participant played.
      attribute Coding type (1..1);    // The type of the participant.
      attribute Uri reference (1..1);    // Identity of participant. May be a logical or physical uri and maybe absolute or relative.
      attribute String display (0..1);    // Human-readable description of the participant.
    }

    class ProvenanceEntityComponent extends BackboneElement {
      attribute ProvenanceEntityRole role (1..1);    // How the entity was used during the activity.
      attribute Coding type (1..1);    // The type of the entity. If the entity is a resource, then this is a resource type.
      attribute Uri reference (1..1);    // Identity of participant. May be a logical or physical uri and maybe absolute or relative.
      attribute String display (0..1);    // Human-readable description of the entity.
      attribute ProvenanceAgentComponent agent (0..1);    // The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
    }

    attribute ResourceReference target (1..-1);    // The resource(s) that were generated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
    attribute Period period (0..1);    // The period during which the activity occurred.
    attribute Instant recorded (1..1);    // The instant of time at which the activity was recorded.
    attribute CodeableConcept reason (0..1);    // The reason that the activity was taking place.
    attribute ResourceReference location (0..1);    // Where the activity occurred, if relevant.
    attribute Uri policy (0..-1);    // Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
    attribute ProvenanceAgentComponent agent (0..-1);    // An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, a piece of software, an inanimate object, an organization, or other entities that may be ascribed responsibility.
    attribute ProvenanceEntityComponent entity (0..-1);    // An entity used in this activity.
    attribute String integritySignature (0..1);    // A digital signature on the target resource(s). The signature should match a Provenance.agent.reference in the provenance resource. The signature is only added to support checking cryptographic integrity of the resource, and not to represent workflow and clinical aspects of the signing process, or to support non-repudiation.
  }

  class Query extends Resource {    // A description of a query with a set of parameters.
    enum QueryOutcome {    // The outcome of processing a query request
      0 : Null = "Missing in instance";
      1 : ok = "The query was processed successfully.";
      2 : limited = "The query was processed successfully, but some additional limitations were added.";
      3 : refused = "The server refused to process the query.";
      4 : error = "The server tried to process the query, but some error occurred.";
    }

    class QueryResponseComponent extends BackboneElement {
      attribute Uri identifier (1..1);    // Links response to source query.
      attribute QueryOutcome outcome (1..1);    // Outcome of processing the query.
      attribute Integer total (0..1);    // Total number of matching records.
      attribute Extension parameter (0..-1);    // Parameters server used.
      attribute Extension first (0..-1);    // To get first page (if paged).
      attribute Extension previous (0..-1);    // To get previous page (if paged).
      attribute Extension next (0..-1);    // To get next page (if paged).
      attribute Extension last (0..-1);    // To get last page (if paged).
      attribute ResourceReference reference (0..-1);    // Resources that are the results of the search.
    }

    attribute Uri identifier (1..1);    // Links query and its response(s).
    attribute Extension parameter (1..-1);    // Set of query parameters with values.
    attribute QueryResponseComponent response (0..1);    // If this is a response to a query.
  }

  class Questionnaire extends Resource {    // A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
    enum QuestionnaireStatus {    // Lifecycle status of the questionnaire
      0 : Null = "Missing in instance";
      1 : draft = "This Questionnaire is not ready for official use.";
      2 : published = "This Questionnaire is ready for use.";
      3 : retired = "This Questionnaire should no longer be used to gather data.";
    }

    enum AnswerFormat {    // The expected format of an answer
      0 : Null = "Missing in instance";
      1 : boolean_ = "Answer is a yes/no answer.";
      2 : decimal = "Answer is a floating point number.";
      3 : integer = "Answer is an integer.";
      4 : date = "Answer is a date.";
      5 : dateTime = "Answer is a date and time.";
      6 : instant = "Answer is a system timestamp.";
      7 : time = "Answer is a time independent of date.";
      8 : string = "Answer is a short (few words to short sentence) free-text entry.";
      9 : text = "Answer is a long (potentially multi-paragram) free-text entry.";
      10 : choice = "Answer is a choice from a list of options.";
      11 : openchoice = "Answer is a choice from a list of options or a free-text entry.";
      12 : attachment = "Answer is binary content such as a image, PDF, etc.";
      13 : reference = "Answer is a reference to another resource (practitioner, organization, etc.).";
      14 : quantity = "Answer is a combination of a numeric value and unit.";
    }

    class GroupComponent extends BackboneElement {
      attribute String linkId (0..1);    // A unique identifier within the questionnaire allowing linkage to the equivalent group in a QuestionnaireAnswers resource.
      attribute String title (0..1);    // The human-readable name for this section of the questionnaire.
      attribute Coding concept (0..-1);    // Identifies a how this group of questions is known in a particular terminology such as LOINC.
      attribute String text (0..1);    // Additional text for the group, used for display purposes.
      attribute Boolean required (0..1);    // If true, indicates that the group must be present and have required questions within it answered.  If false, the group may be skipped when answering the questionnaire.
      attribute Boolean repeats (0..1);    // Whether the group may occur multiple times in the instance, containing multiple sets of answers.
      attribute GroupComponent group (0..-1);    // A sub-group within a group. The ordering of groups within this group is relevant.
      attribute QuestionComponent question (0..-1);    // Set of questions within this group. The order of questions within the group is relevant.
    }

    class QuestionComponent extends BackboneElement {
      attribute String linkId (0..1);    // A unique identifier within the questionnaire allowing linkage to the equivalent group in a [[[QuestionnaireAnswers]]] resource.
      attribute Coding concept (0..-1);    // Identifies a how this group of questions is known in a particular terminology such as LOINC.
      attribute String text (0..1);    // Text of the question as it is shown to the user.
      attribute AnswerFormat type (0..1);    // The expected format of the answer, e.g. the type of input (string, integer) or whether a (multiple) choice is expected.
      attribute Boolean required (0..1);    // If true, indicates that the group must be present and have required questions within it answered.  If false, the group may be skipped when answering the questionnaire.
      attribute Boolean repeats (0..1);    // Whether the group may occur multiple times in the instance, containing multiple sets of answers.
      attribute ResourceReference options (0..1);    // Reference to a valueset containing the possible options.
      attribute GroupComponent group (0..-1);    // Nested group, containing nested question for this question. The order of groups within the question is relevant.
    }

    attribute Identifier identifier (0..-1);    // This records identifiers associated with this question set that are defined by business processed and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    attribute String version (0..1);    // The version number assigned by the publisher for business reasons.  It may remain the same when the resource is updated.
    attribute QuestionnaireStatus status (1..1);    // The lifecycle status of the questionnaire as a whole.
    attribute Date date (0..1);    // The date that this version of the questionnaire was authored.
    attribute String publisher (0..1);    // Organization responsible for developing and maintaining the questionnaire.
    attribute GroupComponent group (1..1);    // A collection of related questions (or further groupings of questions).
  }

  class QuestionnaireAnswers extends Resource {    // A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.
    enum QuestionnaireAnswersStatus {    // Lifecycle status of the questionnaire answers
      0 : Null = "Missing in instance";
      1 : inProgress = "This QuestionnaireAnswers has been partially filled out with answers, but changes or additions are still expected to be made to it.";
      2 : completed = "This QuestionnaireAnswers has been filled out with answers, and the current content is regarded as definitive.";
      3 : amended = "This QuestionnaireAnswers has been filled out with answers, then marked as complete, yet changes or additions have been made to it afterwards.";
    }

    class GroupComponent extends BackboneElement {
      attribute String linkId (0..1);    // Identifies the group from the Questionnaire that corresponds to this group in the QuestionnaireAnswers resource.
      attribute String title (0..1);    // Text that is displayed above the contents of the group.
      attribute String text (0..1);    // Additional text for the group, used for display purposes.
      attribute ResourceReference subject (0..1);    // More specific subject this section's answers are about, details the subject given in QuestionnaireAnswers.
      attribute GroupComponent group (0..-1);    // A sub-group within a group. The ordering of groups within this group is relevant.
      attribute QuestionComponent question (0..-1);    // Set of questions within this group. The order of questions within the group is relevant.
    }

    class QuestionComponent extends BackboneElement {
      attribute String linkId (0..1);    // Identifies the question from the Questionnaire that corresponds to this question in the QuestionnaireAnswers resource.
      attribute String text (0..1);    // Text of the question as it is shown to the user.
      attribute QuestionAnswerComponent answer (0..-1);    // The respondent's answer(s) to the question.
      attribute GroupComponent group (0..-1);    // Nested group, containing nested question for this question. The order of groups within the question is relevant.
    }

    class QuestionAnswerComponent extends BackboneElement {
      attribute Type value (0..1);    // Single-valued answer to the question.
    }

    attribute Identifier identifier (0..1);    // A business identifier assigned to a particular completed (or partially completed) questionnaire.
    attribute ResourceReference questionnaire (0..1);    // Indicates the Questionnaire resource that defines the form for which answers are being provided.
    attribute QuestionnaireAnswersStatus status (1..1);    // The lifecycle status of the questionnaire answers as a whole.
    attribute ResourceReference subject (0..1);    // The subject of the questionnaire answers.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
    attribute ResourceReference author (0..1);    // Person who received the answers to the questions in the QuestionnaireAnswers and recorded them in the system.
    attribute DateTime authored (1..1);    // The date and/or time that this version of the questionnaire answers was authored.
    attribute ResourceReference source (0..1);    // The person who answered the questions about the subject. Only used when this is not the subject him/herself.
    attribute ResourceReference encounter (0..1);    // Encounter during which this set of questionnaire answers were collected. When there were multiple encounters, this is the one considered most relevant to the context of the answers.
    attribute GroupComponent group (0..1);    // A group of questions to a possibly similarly grouped set of questions in the questionnaire answers.
  }

  class ReferralRequest extends Resource {    // Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organisation.
    enum Referralstatus {    // The status of the referral
      0 : Null = "Missing in instance";
      1 : draft = "A draft referral that has yet to be send.";
      2 : sent = "The referral has been transmitted, but not yet acknowledged by the recipient.";
      3 : active = "The referral has been acknowledged by the recipient, and is in the process of being actioned.";
      4 : cancelled = "The referral has been cancelled without being completed. For example it is no longer needed.";
      5 : refused = "The recipient has declined to accept the referral.";
      6 : completed = "The referral has been completely actioned.";
    }

    attribute Referralstatus status (1..1);    // The workflow status of the referral or transfer of care request.
    attribute Identifier identifier (0..-1);    // Business Id that uniquely identifies the referral/care transfer request instance.
    attribute CodeableConcept type (0..1);    // An indication of the type of referral (or where applicable the type of transfer of care) request.
    attribute CodeableConcept specialty (0..1);    // Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.
    attribute CodeableConcept priority (0..1);    // An indication of the urgency of referral (or where applicable the type of transfer of care) request.
    attribute ResourceReference subject (0..1);    // The patient who is the subject of a referral or transfer of care request.
    attribute ResourceReference requester (0..1);    // The healthcare provider or provider organization who/which initaited the referral/transfer of care request. Can also be  Patient (a self referral).
    attribute ResourceReference recipient (0..-1);    // The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
    attribute ResourceReference encounter (0..1);    // The encounter at which the request for referral or transfer of care is initiated.
    attribute DateTime dateSent (0..1);    // Date/DateTime the request for referral or transfer of care is sent by the author.
    attribute CodeableConcept reason (0..1);    // Description of clinical condition indicating why referral/transfer of care is requested.
    attribute String description (0..1);    // The reason gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
    attribute CodeableConcept serviceRequested (0..-1);    // The service(s) that is/are requested to be provided to the patient.
    attribute ResourceReference supportingInformation (0..-1);    // Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.
    attribute Period fulfillmentTime (0..1);    // The period of time within which the services identified in the referral/transfer of care is specified or required to occur.
  }

  class RelatedPerson extends Resource {    // Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
    attribute Identifier identifier (0..-1);    // Identifier for a person within a particular scope.
    attribute ResourceReference patient (1..1);    // The patient this person is related to.
    attribute CodeableConcept relationship (0..1);    // The nature of the relationship between a patient and the related person.
    attribute HumanName name (0..1);    // A name associated with the person.
    attribute Contact telecom (0..-1);    // A contact detail for the person, e.g. a telephone number or an email address.
    attribute CodeableConcept gender (0..1);    // Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
    attribute Address address (0..1);    // Address where the related person can be contacted or visited.
    attribute Attachment photo (0..-1);    // Image of the person.
  }

  class RiskAssessment extends Resource {    // An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
    class RiskAssessmentPredictionComponent extends BackboneElement {
      attribute CodeableConcept outcome (1..1);    // One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
      attribute Type probability (0..1);    // How likely is the outcome (in the specified timeframe).
      attribute Decimal relativeRisk (0..1);    // Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
      attribute Type when (0..1);    // Indicates the period of time or age range of the subject to which the specified probability applies.
      attribute String rationale (0..1);    // Additional information explaining the basis for the prediction.
    }

    attribute ResourceReference subject (0..1);    // The patient or group the risk assessment applies to.
    attribute DateTime date (0..1);    // The date (and possibly time) the risk assessment was performed.
    attribute ResourceReference condition (0..1);    // For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
    attribute ResourceReference performer (0..1);    // The provider or software application that performed the assessment.
    attribute Identifier identifier (0..1);    // Business identifier assigned to the risk assessment.
    attribute CodeableConcept method (0..1);    // The algorithm, processs or mechanism used to evaluate the risk.
    attribute ResourceReference basis (0..-1);    // Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
    attribute RiskAssessmentPredictionComponent prediction (0..-1);    // Describes the expected outcome for the subject.
    attribute String mitigation (0..1);    // A description of the steps that might be taken to reduce the identified risk(s).
  }

  class SecurityEvent extends Resource {    // A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
    enum SecurityEventAction {    // Indicator for type of action performed during the event that generated the audit.
      0 : Null = "Missing in instance";
      1 : C = "Create a new database object, such as Placing an Order.";
      2 : R = "Display or print data, such as a Doctor Census.";
      3 : U = "Update data, such as Revise Patient Information.";
      4 : D = "Delete items, such as a doctor master file record.";
      5 : E = "Perform a system or application function such as log-on, program execution or use of an object's method, or perform a query/search operation.";
    }

    enum SecurityEventOutcome {    // Indicates whether the event succeeded or failed
      0 : Null = "Missing in instance";
      1 : _0 = "The operation completed successfully (whether with warnings or not).";
      2 : _4 = "The action was not successful due to some kind of catered for error (often equivalent to an HTTP 400 response).";
      3 : _8 = "The action was not successful due to some kind of unexpected error (often equivalent to an HTTP 500 response).";
      4 : _12 = "An error of such magnitude occurred that the system is not longer available for use (i.e. the system died).";
    }

    enum NetworkType {    // The type of network access point that originated the audit event
      0 : Null = "Missing in instance";
      1 : _1 = "Machine Name, including DNS name.";
      2 : _2 = "IP Address.";
      3 : _3 = "Telephone Number.";
      4 : _4 = "Email address.";
      5 : _5 = "URI (User directory, HTTP-PUT, ftp, etc.).";
    }

    enum ObjectType {    // Code for the participant object type being audited
      0 : Null = "Missing in instance";
      1 : _1 = "Person.";
      2 : _2 = "System Object.";
      3 : _3 = "Organization.";
      4 : _4 = "Other.";
    }

    enum ObjectRole {    // Code representing the functional application role of Participant Object being audited
      0 : Null = "Missing in instance";
      1 : _1 = "This object is the patient that is the subject of care related to this event.  It is identifiable by patient ID or equivalent.  The patient may be either human or animal.";
      2 : _2 = "This is a location identified as related to the event.  This is usually the location where the event took place.  Note that for shipping, the usual events are arrival at a location or departure from a location.";
      3 : _3 = "This object is any kind of persistent document created as a result of the event.  This could be a paper report, film, electronic report, DICOM Study, etc.  Issues related to medical records life cycle management are conveyed elsewhere.";
      4 : _4 = "A logical object related to the event.  (Deprecated).";
      5 : _5 = "This is any configurable file used to control creation of documents.  Examples include the objects maintained by the HL7 Master File transactions, Value Sets, etc.";
      6 : _6 = "A human participant not otherwise identified by some other category.";
      7 : _7 = "(deprecated).";
      8 : _8 = "Typically a licensed person who is providing or performing care related to the event, generally a physician.   The key distinction between doctor and practitioner is with regards to their role, not the licensing.  The doctor is the human who actually performed the work.  The practitioner is the human or organization that is responsible for the work.";
      9 : _9 = "A person or system that is being notified as part of the event.  This is relevant in situations where automated systems provide notifications to other parties when an event took place.";
      10 : _10 = "Insurance company, or any other organization who accepts responsibility for paying for the healthcare event.";
      11 : _11 = "A person or active system object involved in the event with a security role.";
      12 : _12 = "A person or system object involved in the event with the authority to modify security roles of other objects.";
      13 : _13 = "A passive object, such as a role table, that is relevant to the event.";
      14 : _14 = "(deprecated)  Relevant to certain RBAC security methodologies.";
      15 : _15 = "Any person or organization responsible for providing care.  This encompasses all forms of care, licensed or otherwise, and all sorts of teams and care groups. Note, the distinction between practitioners and the doctor that actually provided the care to the patient.";
      16 : _16 = "The source or destination for data transfer, when it does not match some other role.";
      17 : _17 = "A source or destination for data transfer, that acts as an archive, database, or similar role.";
      18 : _18 = "An object that holds schedule information.  This could be an appointment book, availability information, etc.";
      19 : _19 = "An organization or person that is the recipient of services.  This could be an organization that is buying services for a patient, or a person that is buying services for an animal.";
      20 : _20 = "An order, task, work item, procedure step, or other description of work to be performed.  E.g., a particular instance of an MPPS.";
      21 : _21 = "A list of jobs or a system that provides lists of jobs.  E.g., an MWL SCP.";
      22 : _22 = "(Deprecated).";
      23 : _23 = "An object that specifies or controls the routing or delivery of items.  For example, a distribution list is the routing criteria for mail.  The items delivered may be documents, jobs, or other objects.";
      24 : _24 = "The contents of a query.  This is used to capture the contents of any kind of query.  For security surveillance purposes knowing the queries being made is very important.";
    }

    enum ObjectLifecycle {    // Identifier for the data life-cycle stage for the participant object
      0 : Null = "Missing in instance";
      1 : _1 = "Origination / Creation.";
      2 : _2 = "Import / Copy from original.";
      3 : _3 = "Amendment.";
      4 : _4 = "Verification.";
      5 : _5 = "Translation.";
      6 : _6 = "Access / Use.";
      7 : _7 = "De-identification.";
      8 : _8 = "Aggregation, summarization, derivation.";
      9 : _9 = "Report.";
      10 : _10 = "Export / Copy to target.";
      11 : _11 = "Disclosure.";
      12 : _12 = "Receipt of disclosure.";
      13 : _13 = "Archiving.";
      14 : _14 = "Logical deletion.";
      15 : _15 = "Permanent erasure / Physical destruction.";
    }

    class SecurityEventEventComponent extends BackboneElement {
      attribute CodeableConcept type (1..1);    // Identifier for a family of the event.
      attribute CodeableConcept subtype (0..-1);    // Identifier for the category of event.
      attribute SecurityEventAction action (0..1);    // Indicator for type of action performed during the event that generated the audit.
      attribute Instant dateTime (1..1);    // The time when the event occurred on the source.
      attribute SecurityEventOutcome outcome (0..1);    // Indicates whether the event succeeded or failed.
      attribute String outcomeDesc (0..1);    // A free text description of the outcome of the event.
    }

    class SecurityEventParticipantComponent extends BackboneElement {
      attribute CodeableConcept role (0..-1);    // Specification of the role(s) the user plays when performing the event. Usually the codes used in this element are local codes defined by the role-based access control security system used in the local context.
      attribute ResourceReference reference (0..1);    // Direct reference to a resource that identifies the participant.
      attribute String userId (0..1);    // Unique identifier for the user actively participating in the event.
      attribute String altId (0..1);    // Alternative Participant Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g., single sign-on), if available.
      attribute String name (0..1);    // Human-meaningful name for the user.
      attribute Boolean requestor (1..1);    // Indicator that the user is or is not the requestor, or initiator, for the event being audited.
      attribute Coding media (0..1);    // Type of media involved. Used when the event is about exporting/importing onto media.
      attribute SecurityEventParticipantNetworkComponent network (0..1);    // Logical network location for application activity, if the activity has a network location.
    }

    class SecurityEventParticipantNetworkComponent extends BackboneElement {
      attribute String identifier (0..1);    // An identifier for the network access point of the user device for the audit event.
      attribute NetworkType type (0..1);    // An identifier for the type of network access point that originated the audit event.
    }

    class SecurityEventSourceComponent extends BackboneElement {
      attribute String site (0..1);    // Logical source location within the healthcare enterprise network.
      attribute String identifier (1..1);    // Identifier of the source where the event originated.
      attribute Coding type (0..-1);    // Code specifying the type of source where event originated.
    }

    class SecurityEventObjectComponent extends BackboneElement {
      attribute Identifier identifier (0..1);    // Identifies a specific instance of the participant object. The reference should always be version specific.
      attribute ResourceReference reference (0..1);    // Identifies a specific instance of the participant object. The reference should always be version specific.
      attribute ObjectType type (0..1);    // Object type being audited.
      attribute ObjectRole role (0..1);    // Code representing the functional application role of Participant Object being audited.
      attribute ObjectLifecycle lifecycle (0..1);    // Identifier for the data life-cycle stage for the participant object.
      attribute CodeableConcept sensitivity (0..1);    // Denotes policy-defined sensitivity for the Participant Object ID such as VIP, HIV status, mental health status or similar topics.
      attribute String name (0..1);    // An instance-specific descriptor of the Participant Object ID audited, such as a person's name.
      attribute String description (0..1);    // Text that describes the object in more detail.
      attribute Base64Binary query (0..1);    // The actual query for a query-type participant object.
      attribute SecurityEventObjectDetailComponent detail (0..-1);    // Additional Information about the Object.
    }

    class SecurityEventObjectDetailComponent extends BackboneElement {
      attribute String type (1..1);    // Name of the property.
      attribute Base64Binary value (1..1);    // Property value.
    }

    attribute SecurityEventEventComponent event (1..1);    // Identifies the name, action type, time, and disposition of the audited event.
    attribute SecurityEventParticipantComponent participant (1..-1);    // A person, a hardware device or software process.
    attribute SecurityEventSourceComponent source (1..1);    // Application systems and processes.
    attribute SecurityEventObjectComponent object (0..-1);    // Specific instances of data or objects that have been accessed.
  }

  class Slot extends Resource {    // (informative) A slot of time on a schedule that may be available for booking appointments.
    enum Slotstatus {    // The free/busy status of an appointment
      0 : Null = "Missing in instance";
      1 : bUSY = "Indicates that the time interval is busy because one  or more events have been scheduled for that interval.";
      2 : fREE = "Indicates that the time interval is free for scheduling.";
      3 : bUSYUNAVAILABLE = "Indicates that the time interval is busy and that the interval can not be scheduled.";
      4 : bUSYTENTATIVE = "Indicates that the time interval is busy because one or more events have been tentatively scheduled for that interval.";
    }

    attribute Identifier identifier (0..-1);    // External Ids for this item.
    attribute CodeableConcept type (0..1);    // The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
    attribute ResourceReference availability (1..1);    // The availability resource that this slot defines an interval of status information.
    attribute Slotstatus freeBusyType (1..1);    // BUSY | FREE | BUSY-UNAVAILABLE | BUSY-TENTATIVE.
    attribute Instant start (1..1);    // Date/Time that the slot is to begin.
    attribute Instant end (1..1);    // Date/Time that the slot is to conclude.
    attribute Boolean overbooked (0..1);    // This slot has already been overbooked, appointments are unlikely to be accepted for this time.
    attribute String comment (0..1);    // Comments on the slot to describe any extended information. Such as custom constraints on the slot.
    attribute DateTime lastModified (0..1);    // When this slot was created, or last revised.
  }

  class Specimen extends Resource {    // Sample for analysis.
    enum HierarchicalRelationshipType {    // Type indicating if this is a parent or child relationship
      0 : Null = "Missing in instance";
      1 : parent = "The target resource is the parent of the focal specimen resource.";
      2 : child = "The target resource is the child of the focal specimen resource.";
    }

    class SpecimenSourceComponent extends BackboneElement {
      attribute HierarchicalRelationshipType relationship (1..1);    // Whether this relationship is to a parent or to a child.
      attribute ResourceReference target (0..-1);    // The specimen resource that is the target of this relationship.
    }

    class SpecimenCollectionComponent extends BackboneElement {
      attribute ResourceReference collector (0..1);    // Person who collected the specimen.
      attribute String comment (0..-1);    // To communicate any details or issues encountered during the specimen collection procedure.
      attribute Type collected (0..1);    // Time when specimen was collected from subject - the physiologically relevant time.
      attribute Quantity quantity (0..1);    // The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
      attribute CodeableConcept method (0..1);    // A coded value specifying the technique that is used to perform the procedure.
      attribute CodeableConcept sourceSite (0..1);    // Anatomical location from which the specimen should be collected (if subject is a patient). This element is not used for environmental specimens.
    }

    class SpecimenTreatmentComponent extends BackboneElement {
      attribute String description (0..1);    // Textual description of procedure.
      attribute CodeableConcept procedure (0..1);    // A coded value specifying the procedure used to process the specimen.
      attribute ResourceReference additive (0..-1);    // Material used in the processing step.
    }

    class SpecimenContainerComponent extends BackboneElement {
      attribute Identifier identifier (0..-1);    // Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
      attribute String description (0..1);    // Textual description of the container.
      attribute CodeableConcept type (0..1);    // The type of container associated with the specimen (e.g. slide, aliquot, etc).
      attribute Quantity capacity (0..1);    // The capacity (volume or other measure) the container may contain.
      attribute Quantity specimenQuantity (0..1);    // The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
      attribute ResourceReference additive (0..1);    // Additive associated with the container.
    }

    attribute Identifier identifier (0..-1);    // Id for specimen.
    attribute CodeableConcept type (0..1);    // Kind of material that forms the specimen.
    attribute SpecimenSourceComponent source (0..-1);    // Parent specimen from which the focal specimen was a component.
    attribute ResourceReference subject (1..1);    // Where the specimen came from. This may be the patient(s) or from the environment or  a device.
    attribute Identifier accessionIdentifier (0..1);    // The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
    attribute DateTime receivedTime (0..1);    // Time when specimen was received for processing or testing.
    attribute SpecimenCollectionComponent collection (1..1);    // Details concerning the specimen collection.
    attribute SpecimenTreatmentComponent treatment (0..-1);    // Details concerning treatment and processing steps for the specimen.
    attribute SpecimenContainerComponent container (0..-1);    // The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
  }

  class Subscription extends Resource {    // Todo.
    enum SubscriptionStatus {    // The status of a subscription
      0 : Null = "Missing in instance";
      1 : requested = "The client has requested the subscription, and the server has not yet set it up.";
      2 : active = "The subscription is active.";
      3 : error = "The server has an error executing the notification.";
      4 : off = "Too many errors have occurred or the subscription has expired.";
    }

    enum SubscriptionChannelType {    // The type of method used to execute a subscription
      0 : Null = "Missing in instance";
      1 : resthook = "The channel is executed by making a post to the URI. If a payload is included, the URL is interpreted as the service base, and an update (PUT) is made.";
      2 : websocket = "The channel is executed by sending a packet across a web socket connection maintained by the client. The URL identifies the websocket, and the client binds to this URL.";
      3 : email = "The channel is executed by sending an email to the email addressed in the URI (which must be a mailto:).";
      4 : sms = "The channel is executed by sending an SMS message to the phone number identified in the URL (tel:).";
      5 : message = "The channel Is executed by sending a message (e.g. a Bundle with a MessageHeader resource etc) to the application identified in the URI.";
    }

    class SubscriptionChannelComponent extends BackboneElement {
      attribute SubscriptionChannelType type (1..1);    // Todo.
      attribute Uri url (0..1);    // Todo.
      attribute String payload (1..1);    // ToDo.
      attribute String header (0..1);    // Usage depends on the channel type.
    }

    class SubscriptionTagComponent extends BackboneElement {
      attribute Uri term (1..1);    // Todo.
      attribute Uri scheme (1..1);    // Todo.
      attribute String description (0..1);    // Todo.
    }

    attribute String criteria (1..1);    // Todo.
    attribute Contact contact (0..-1);    // Todo.
    attribute String reason (1..1);    // Todo.
    attribute SubscriptionStatus status (1..1);    // Todo.
    attribute String error (0..1);    // Todo.
    attribute SubscriptionChannelComponent channel (1..1);    // Todo.
    attribute Instant end (0..1);    // Todo.
    attribute SubscriptionTagComponent tag (0..-1);    // Todo.
  }

  class Substance extends Resource {    // A homogeneous material with a definite composition.
    class SubstanceInstanceComponent extends BackboneElement {
      attribute Identifier identifier (0..1);    // Identifier associated with the package/container (usually a label affixed directly).
      attribute DateTime expiry (0..1);    // When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
      attribute Quantity quantity (0..1);    // The amount of the substance.
    }

    class SubstanceIngredientComponent extends BackboneElement {
      attribute Ratio quantity (0..1);    // The amount of the ingredient in the substance - a concentration ratio.
      attribute ResourceReference substance (1..1);    // Another substance that is a component of this substance.
    }

    attribute CodeableConcept type (1..1);    // A code (or set of codes) that identify this substance.
    attribute String description (0..1);    // A description of the substance - its appearance, handling requirements, and other usage notes.
    attribute SubstanceInstanceComponent instance (0..1);    // Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
    attribute SubstanceIngredientComponent ingredient (0..-1);    // A substance can be composed of other substances.
  }

  class Supply extends Resource {    // A supply - a  request for something, and provision of what is supplied.
    enum ValuesetSupplyStatus {    // Status of the supply
      0 : Null = "Missing in instance";
      1 : requested = "Supply has been requested, but not dispensed.";
      2 : dispensed = "Supply is part of a pharmacy order and has been dispensed.";
      3 : received = "Supply has been received by the requestor.";
      4 : failed = "The supply will not be completed because the supplier was unable or unwilling to supply the item.";
      5 : cancelled = "The orderer of the supply cancelled the request.";
    }

    enum ValuesetSupplyDispenseStatus {    // Status of the dispense
      0 : Null = "Missing in instance";
      1 : inProgress = "Supply has been requested, but not dispensed.";
      2 : dispensed = "Supply is part of a pharmacy order and has been dispensed.";
      3 : abandoned = "Dispensing was not completed.";
    }

    class SupplyDispenseComponent extends BackboneElement {
      attribute Identifier identifier (0..1);    // Identifier assigned by the dispensing facility when the dispense occurs.
      attribute ValuesetSupplyDispenseStatus status (0..1);    // A code specifying the state of the dispense event.
      attribute CodeableConcept type (0..1);    // Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
      attribute Quantity quantity (0..1);    // The amount of supply that has been dispensed. Includes unit of measure.
      attribute ResourceReference suppliedItem (0..1);    // Identifies the medication or substance being dispensed. This is either a link to a resource representing the details of the medication or substance or a simple attribute carrying a code that identifies the medication from a known list of medications.
      attribute ResourceReference supplier (0..1);    // The individual responsible for dispensing the medication.
      attribute Period whenPrepared (0..1);    // The time the dispense event occurred.
      attribute Period whenHandedOver (0..1);    // The time the dispensed item was sent or handed to the patient (or agent).
      attribute ResourceReference destination (0..1);    // Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
      attribute ResourceReference receiver (0..-1);    // Identifies the person who picked up the Supply.
    }

    attribute CodeableConcept kind (0..1);    // Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
    attribute Identifier identifier (0..1);    // Unique identifier for this supply request.
    attribute ValuesetSupplyStatus status (0..1);    // Status of the supply request.
    attribute ResourceReference orderedItem (0..1);    // The item that is requested to be supplied.
    attribute ResourceReference patient (0..1);    // A link to a resource representing the person whom the ordered item is for.
    attribute SupplyDispenseComponent dispense (0..-1);    // Indicates the details of the dispense event such as the days supply and quantity of a supply dispensed.
  }

  class ValueSet extends Resource {    // A value set specifies a set of codes drawn from one or more code systems.
    enum ValuesetStatus {    // The lifecycle status of a Value Set or Concept Map
      0 : Null = "Missing in instance";
      1 : draft = "This valueset is still under development.";
      2 : active = "This valueset is ready for normal use.";
      3 : retired = "This valueset has been withdrawn or superceded and should no longer be used.";
    }

    enum FilterOperator {    // The kind of operation to perform as a part of a property based filter
      0 : Null = "Missing in instance";
      1 : equal = "The property value has the concept specified by the value.";
      2 : isa = "The property value has a concept that has an is-a relationship with the value.";
      3 : isnota = "The property value has a concept that does not have an is-a relationship with the value.";
      4 : regex = "The property value representation matches the regex specified in the value.";
      5 : in = "The property value is in the set of codes or concepts identified by the value.";
      6 : notIn = "The property value is not in the set of codes or concepts identified by the value.";
    }

    class ValueSetDefineComponent extends BackboneElement {
      attribute Uri system (1..1);    // URI to identify the code system.
      attribute String version (0..1);    // The version of this code system that defines the codes. Note that the version is optional because a well maintained code system does not suffer from versioning, and therefore the version does not need to be maintained. However many code systems are not well maintained, and the version needs to be defined and tracked.
      attribute Boolean caseSensitive (0..1);    // If code comparison is case sensitive when codes within this system are compared to each other.
      attribute ValueSetDefineConceptComponent concept (0..-1);    // Concepts in the code system.
    }

    class ValueSetDefineConceptComponent extends BackboneElement {
      attribute Code code (1..1);    // Code that identifies concept.
      attribute Boolean abstract_ (0..1);    // If this code is not for use as a real concept.
      attribute String display (0..1);    // Text to Display to the user.
      attribute String definition (0..1);    // The formal definition of the concept. Formal definitions are not required, because of the prevalence of legacy systems without them, but they are highly recommended, as without them there is no formal meaning associated with the concept.
      attribute ValueSetDefineConceptComponent concept (0..-1);    // Child Concepts (is-a / contains).
    }

    class ValueSetComposeComponent extends BackboneElement {
      attribute Uri import_ (0..-1);    // Includes the contents of the referenced value set as a part of the contents of this value set.
      attribute ConceptSetComponent include (0..-1);    // Include one or more codes from a code system.
      attribute ConceptSetComponent exclude (0..-1);    // Exclude one or more codes from the value set.
    }

    class ConceptSetComponent extends BackboneElement {
      attribute Uri system (1..1);    // The code system from which the selected codes come from.
      attribute String version (0..1);    // The version of the code system that the codes are selected from.
      attribute Code code (0..-1);    // Specifies a code or concept to be included or excluded. The list of codes is considered ordered, though the order may not have any particular significance.
      attribute ConceptSetFilterComponent filter (0..-1);    // Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
    }

    class ConceptSetFilterComponent extends BackboneElement {
      attribute Code property (1..1);    // A code that identifies a property defined in the code system.
      attribute FilterOperator op (1..1);    // The kind of operation to perform as a part of the filter criteria.
      attribute Code value (1..1);    // The match value may be either a code defined by the system, or a string value which is used a regex match on the literal string of the property value.
    }

    class ValueSetExpansionComponent extends BackboneElement {
      attribute Identifier identifier (0..1);    // An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.
      attribute Instant timestamp (1..1);    // Time valueset expansion happened.
      attribute ValueSetExpansionContainsComponent contains (0..-1);    // Codes in the value set.
    }

    class ValueSetExpansionContainsComponent extends BackboneElement {
      attribute Uri system (0..1);    // System value for the code.
      attribute Code code (0..1);    // Code - if blank, this is not a choosable code.
      attribute String display (0..1);    // User display for the concept.
      attribute ValueSetExpansionContainsComponent contains (0..-1);    // Codes contained in this concept.
    }

    attribute String identifier (0..1);    // The identifier that is used to identify this value set when it is referenced in a specification, model, design or an instance (should be globally unique OID, UUID, or URI).
    attribute String version (0..1);    // The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    attribute String name (1..1);    // A free text natural language name describing the value set.
    attribute String purpose (0..1);    // This should describe "the semantic space" to be included in the value set. This can also describe the approach taken to build the value set.
    attribute Boolean immutable (0..1);    // If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
    attribute String publisher (0..1);    // The name of the individual or organization that published the value set.
    attribute Contact telecom (0..-1);    // Contacts of the publisher to assist a user in finding and communicating with the publisher.
    attribute String description (1..1);    // A free text natural language description of the use of the value set - reason for definition, conditions of use, etc. The description may include a list of.
    attribute String copyright (0..1);    // A copyright statement relating to the value set and/or its contents. These are generally legal restrictions on the use and publishing of the value set.
    attribute ValuesetStatus status (1..1);    // The status of the value set.
    attribute Boolean experimental (0..1);    // This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    attribute Boolean extensible (0..1);    // Whether this is intended to be used with an extensible binding or not.
    attribute DateTime date (0..1);    // The date that the value set status was last changed.
    attribute Date stableDate (0..1);    // If a Stability Date is expanded by evaluating the Content Logical Definition using the current version of all referenced code system(s) and value sets as of the Stability Date.
    attribute ValueSetDefineComponent define (0..1);    // When value set defines its own codes.
    attribute ValueSetComposeComponent compose (0..1);    // When value set includes codes from elsewhere.
    attribute ValueSetExpansionComponent expansion (0..1);    // When value set is an expansion.
  }

}